#!/usr/bin/env python3
"""
–£–¥–∞–ª–µ–Ω–∏–µ –≤—ã–¥–µ–ª–µ–Ω–Ω—ã—Ö —Ä–æ–ª–µ–π user_denis –∏ denis_none –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
"""

import asyncio
import asyncpg
import logging
import os
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s [%(levelname)s] %(message)s',
    handlers=[logging.StreamHandler()]
)

logger = logging.getLogger(__name__)

async def delete_selected_roles():
    """
    –£–¥–∞–ª—è–µ—Ç —Ä–æ–ª–∏ user_denis –∏ denis_none –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    """
    logger.info("üóëÔ∏è –£–î–ê–õ–ï–ù–ò–ï –í–´–î–ï–õ–ï–ù–ù–´–• –†–û–õ–ï–ô")
    logger.info("=" * 50)
    
    # –†–æ–ª–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
    roles_to_delete = ['user_denis', 'denis_none']
    
    connection = None
    
    try:
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        database_url = os.getenv('DATABASE_URL')
        if not database_url:
            logger.error("‚ùå DATABASE_URL –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
            return False
        
        logger.info("üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...")
        connection = await asyncpg.connect(database_url)
        logger.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ä–æ–ª–µ–π –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º
        logger.info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ä–æ–ª–µ–π...")
        
        for role_name in roles_to_delete:
            check_query = "SELECT rolname FROM pg_roles WHERE rolname = $1"
            result = await connection.fetchrow(check_query, role_name)
            
            if result:
                logger.info(f"‚úÖ –†–æ–ª—å {role_name} –Ω–∞–π–¥–µ–Ω–∞")
            else:
                logger.warning(f"‚ö†Ô∏è –†–æ–ª—å {role_name} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        
        # –£–¥–∞–ª—è–µ–º —Ä–æ–ª–∏
        logger.info("üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ —Ä–æ–ª–µ–π...")
        
        for role_name in roles_to_delete:
            try:
                # –°–Ω–∞—á–∞–ª–∞ –æ—Ç–∑—ã–≤–∞–µ–º –≤—Å–µ –ø—Ä–∞–≤–∞ —Ä–æ–ª–∏
                logger.info(f"üîÑ –û—Ç–∑—ã–≤ –ø—Ä–∞–≤ –¥–ª—è —Ä–æ–ª–∏ {role_name}...")
                await connection.execute(f"REVOKE ALL ON ALL TABLES IN SCHEMA public FROM {role_name}")
                await connection.execute(f"REVOKE ALL ON ALL SEQUENCES IN SCHEMA public FROM {role_name}")
                await connection.execute(f"REVOKE USAGE ON SCHEMA public FROM {role_name}")
                
                # –£–¥–∞–ª—è–µ–º —Ä–æ–ª—å
                logger.info(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ —Ä–æ–ª–∏ {role_name}...")
                await connection.execute(f"DROP ROLE IF EXISTS {role_name}")
                logger.info(f"‚úÖ –†–æ–ª—å {role_name} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞")
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ä–æ–ª–∏ {role_name}: {str(e)}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        logger.info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞...")
        
        for role_name in roles_to_delete:
            check_query = "SELECT rolname FROM pg_roles WHERE rolname = $1"
            result = await connection.fetchrow(check_query, role_name)
            
            if result:
                logger.error(f"‚ùå –†–æ–ª—å {role_name} –≤—Å–µ –µ—â–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            else:
                logger.info(f"‚úÖ –†–æ–ª—å {role_name} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞")
        
        logger.info("üéâ –£–¥–∞–ª–µ–Ω–∏–µ —Ä–æ–ª–µ–π –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ä–æ–ª–µ–π: {str(e)}")
        return False
        
    finally:
        if connection:
            await connection.close()
            logger.info("üîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ")

if __name__ == "__main__":
    asyncio.run(delete_selected_roles())

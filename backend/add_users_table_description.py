#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ–ø–∏—Å–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã users –≤ database_descriptions.
"""

import asyncio
import logging
import sys
import os
import json

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from services.app_database import app_database_service

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

async def add_users_table_description(database_name: str, schema_name: str = "demo1"):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã users –≤ database_descriptions"""
    logger.info(f"üìù –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã users –≤ database_descriptions")
    
    try:
        # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –æ–ø–∏—Å–∞–Ω–∏–µ
        check_query = """
        SELECT id, table_description, created_at
        FROM database_descriptions 
        WHERE database_name = $1 
        AND schema_name = $2 
        AND table_name = 'users'
        """
        
        check_result = await app_database_service.execute_query(check_query, [database_name, schema_name])
        
        if check_result.data:
            logger.info(f"‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã users —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç:")
            for desc in check_result.data:
                logger.info(f"   Description: {desc['table_description']}")
                logger.info(f"   Created: {desc['created_at']}")
            return True
        
        # 2. –°–æ–∑–¥–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã users
        users_description = {
            "description": "–¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–∏—Å—Ç–µ–º—ã",
            "object_type": "table",
            "columns": {
                "id": {
                    "description": "–£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
                    "datatype": "uuid",
                    "type": "uuid",
                    "nullable": False,
                    "default": "gen_random_uuid()"
                },
                "username": {
                    "description": "–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
                    "datatype": "character varying",
                    "type": "character varying",
                    "nullable": True,
                    "default": None
                },
                "email": {
                    "description": "Email –∞–¥—Ä–µ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
                    "datatype": "character varying",
                    "type": "character varying",
                    "nullable": True,
                    "default": None
                },
                "full_name": {
                    "description": "–ü–æ–ª–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
                    "datatype": "character varying",
                    "type": "character varying",
                    "nullable": True,
                    "default": None
                },
                "hashed_password": {
                    "description": "–•—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
                    "datatype": "character varying",
                    "type": "character varying",
                    "nullable": True,
                    "default": None
                },
                "telegram_id": {
                    "description": "Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
                    "datatype": "character varying",
                    "type": "character varying",
                    "nullable": True,
                    "default": None
                },
                "telegram_username": {
                    "description": "Telegram username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
                    "datatype": "character varying",
                    "type": "character varying",
                    "nullable": True,
                    "default": None
                },
                "is_active": {
                    "description": "–°—Ç–∞—Ç—É—Å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
                    "datatype": "boolean",
                    "type": "boolean",
                    "nullable": False,
                    "default": "true"
                },
                "created_at": {
                    "description": "–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏",
                    "datatype": "timestamp without time zone",
                    "type": "timestamp without time zone",
                    "nullable": False,
                    "default": "CURRENT_TIMESTAMP"
                },
                "updated_at": {
                    "description": "–î–∞—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏",
                    "datatype": "timestamp without time zone",
                    "type": "timestamp without time zone",
                    "nullable": False,
                    "default": "CURRENT_TIMESTAMP"
                }
            }
        }
        
        # 3. –î–æ–±–∞–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –≤ database_descriptions
        insert_query = """
        INSERT INTO database_descriptions (database_name, schema_name, table_name, object_type, table_description, created_at, updated_at)
        VALUES ($1, $2, $3, $4, $5, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP)
        """
        
        await app_database_service.execute_query(insert_query, [
            database_name, 
            schema_name, 
            'users', 
            'table', 
            json.dumps(users_description, ensure_ascii=False)
        ])
        
        logger.info(f"‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã users –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ database_descriptions")
        logger.info(f"   Database: {database_name}")
        logger.info(f"   Schema: {schema_name}")
        logger.info(f"   Table: users")
        logger.info(f"   Type: table")
        
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –æ–ø–∏—Å–∞–Ω–∏—è: {str(e)}")
        return False

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    logger.info("üöÄ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã users")
    logger.info("=" * 40)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    try:
        await app_database_service.initialize()
        logger.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
        return
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è test1.demo1.users
    success = await add_users_table_description(
        database_name="test1",
        schema_name="demo1"
    )
    
    if success:
        logger.info("‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã users —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!")
    else:
        logger.info("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã users")
    
    # –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    await app_database_service.close()
    logger.info("üîö –û–ø–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

if __name__ == "__main__":
    asyncio.run(main())

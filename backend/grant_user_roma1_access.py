#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ user_roma1 –∫ —Ç–∞–±–ª–∏—Ü–µ users.
"""

import asyncio
import logging
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from services.app_database import app_database_service

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

async def grant_user_roma1_access_to_users():
    """–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –¥–æ—Å—Ç—É–ø user_roma1 –∫ —Ç–∞–±–ª–∏—Ü–µ users"""
    logger.info("üîê –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–∞ user_roma1 –∫ —Ç–∞–±–ª–∏—Ü–µ users")
    
    try:
        # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–µ –ø—Ä–∞–≤–æ
        check_query = """
        SELECT id, permission_type, created_at
        FROM user_permissions 
        WHERE role_name = 'user_roma1' 
        AND database_name = 'cloverdash_bot' 
        AND schema_name = 'public'
        AND table_name = 'users'
        """
        
        check_result = await app_database_service.execute_query(check_query)
        
        if check_result.data:
            logger.info(f"‚úÖ –ü—Ä–∞–≤–æ –¥–æ—Å—Ç—É–ø–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç:")
            for perm in check_result.data:
                logger.info(f"   Permission: {perm['permission_type']}")
                logger.info(f"   Created: {perm['created_at']}")
            return True
        
        # 2. –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∞–≤–æ –¥–æ—Å—Ç—É–ø–∞
        insert_query = """
        INSERT INTO user_permissions (role_name, database_name, schema_name, table_name, permission_type, created_at)
        VALUES ($1, $2, $3, $4, $5, CURRENT_TIMESTAMP)
        """
        
        await app_database_service.execute_query(insert_query, [
            'user_roma1', 
            'cloverdash_bot', 
            'public', 
            'users', 
            'SELECT'
        ])
        
        logger.info(f"‚úÖ –ü—Ä–∞–≤–æ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ç–∞–±–ª–∏—Ü–µ users –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ —Ä–æ–ª–∏ user_roma1")
        logger.info(f"   Database: cloverdash_bot")
        logger.info(f"   Schema: public")
        logger.info(f"   Permission: SELECT")
        
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–∏ –¥–æ—Å—Ç—É–ø–∞: {str(e)}")
        return False

async def add_users_table_description_for_cloverdash_bot():
    """–î–æ–±–∞–≤–ª—è–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã users –¥–ª—è –±–∞–∑—ã cloverdash_bot"""
    logger.info("üìù –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã users –¥–ª—è cloverdash_bot")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –æ–ø–∏—Å–∞–Ω–∏–µ
        check_query = """
        SELECT id, table_description, created_at
        FROM database_descriptions 
        WHERE database_name = 'cloverdash_bot' 
        AND schema_name = 'public' 
        AND table_name = 'users'
        """
        
        check_result = await app_database_service.execute_query(check_query)
        
        if check_result.data:
            logger.info(f"‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã users —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –¥–ª—è cloverdash_bot")
            return True
        
        # –°–æ–∑–¥–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã users
        import json
        users_description = {
            "description": "–¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–∏—Å—Ç–µ–º—ã",
            "object_type": "table",
            "columns": {
                "id": {
                    "description": "–£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
                    "datatype": "uuid",
                    "type": "uuid",
                    "nullable": False,
                    "default": "gen_random_uuid()",
                    "primary_key": True
                },
                "username": {
                    "description": "–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
                    "datatype": "character varying",
                    "type": "character varying(100)",
                    "nullable": True,
                    "default": None,
                    "unique": True
                },
                "email": {
                    "description": "Email –∞–¥—Ä–µ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
                    "datatype": "character varying",
                    "type": "character varying(255)",
                    "nullable": True,
                    "default": None,
                    "unique": True
                },
                "full_name": {
                    "description": "–ü–æ–ª–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
                    "datatype": "character varying",
                    "type": "character varying(255)",
                    "nullable": True,
                    "default": None
                },
                "hashed_password": {
                    "description": "–•—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
                    "datatype": "character varying",
                    "type": "character varying(255)",
                    "nullable": True,
                    "default": None
                },
                "telegram_id": {
                    "description": "Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
                    "datatype": "character varying",
                    "type": "character varying(100)",
                    "nullable": True,
                    "default": None,
                    "unique": True
                },
                "telegram_username": {
                    "description": "Telegram username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
                    "datatype": "character varying",
                    "type": "character varying(100)",
                    "nullable": True,
                    "default": None
                },
                "is_active": {
                    "description": "–°—Ç–∞—Ç—É—Å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
                    "datatype": "boolean",
                    "type": "boolean",
                    "nullable": False,
                    "default": "true"
                },
                "created_at": {
                    "description": "–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏",
                    "datatype": "timestamp without time zone",
                    "type": "timestamp",
                    "nullable": False,
                    "default": "CURRENT_TIMESTAMP"
                },
                "updated_at": {
                    "description": "–î–∞—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏",
                    "datatype": "timestamp without time zone",
                    "type": "timestamp",
                    "nullable": False,
                    "default": "CURRENT_TIMESTAMP"
                }
            }
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –≤ database_descriptions
        insert_query = """
        INSERT INTO database_descriptions (database_name, schema_name, table_name, object_type, table_description, created_at, updated_at)
        VALUES ($1, $2, $3, $4, $5, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP)
        """
        
        await app_database_service.execute_query(insert_query, [
            'cloverdash_bot', 
            'public', 
            'users', 
            'table', 
            json.dumps(users_description, ensure_ascii=False)
        ])
        
        logger.info(f"‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã users –¥–æ–±–∞–≤–ª–µ–Ω–æ –¥–ª—è cloverdash_bot")
        
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –æ–ø–∏—Å–∞–Ω–∏—è: {str(e)}")
        return False

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    logger.info("üöÄ –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–∞ user_roma1 –∫ —Ç–∞–±–ª–∏—Ü–µ users")
    logger.info("=" * 60)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    try:
        await app_database_service.initialize()
        logger.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
        return
    
    # 1. –î–æ–±–∞–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã users –¥–ª—è cloverdash_bot
    desc_success = await add_users_table_description_for_cloverdash_bot()
    
    # 2. –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º –¥–æ—Å—Ç—É–ø user_roma1 –∫ —Ç–∞–±–ª–∏—Ü–µ users
    access_success = await grant_user_roma1_access_to_users()
    
    if desc_success and access_success:
        logger.info("‚úÖ –î–æ—Å—Ç—É–ø user_roma1 –∫ —Ç–∞–±–ª–∏—Ü–µ users —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!")
    else:
        logger.info("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª–Ω–æ—Å—Ç—å—é –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –¥–æ—Å—Ç—É–ø")
    
    # –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    await app_database_service.close()
    logger.info("üîö –û–ø–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

if __name__ == "__main__":
    asyncio.run(main())


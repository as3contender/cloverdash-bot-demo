#!/usr/bin/env python3
"""
–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –º–æ–¥—É–ª—å –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ö–µ–º –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ API endpoints.

–≠—Ç–æ—Ç –º–æ–¥—É–ª—å –¥–æ–±–∞–≤–ª—è–µ—Ç –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ schema_name –∏ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü –≤:
- /api/database/tables endpoint
- /api/database/table/{table_name}/sample endpoint
- LLM service –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ SQL –∑–∞–ø—Ä–æ—Å–æ–≤
"""

import logging
from typing import Dict, List, Any, Optional
from functools import wraps

logger = logging.getLogger(__name__)

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å—Ö–µ–º
from schema_monitoring import schema_monitor, log_schema_access, log_table_access_endpoint


def enhance_database_api_logging():
    """
    –£–ª—É—á—à–∞–µ—Ç –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ API endpoints –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    """
    
    # –ü–∞—Ç—á–∏–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π endpoint get_available_tables
    def patch_get_available_tables():
        """–î–æ–±–∞–≤–ª—è–µ—Ç –¥–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ get_available_tables"""
        try:
            from api.database import get_available_tables as original_get_available_tables
            
            @wraps(original_get_available_tables)
            async def enhanced_get_available_tables(user_id: str = None):
                logger.info(f"üîç API: –ó–∞–ø—Ä–æ—Å –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                
                try:
                    # –í—ã–∑—ã–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
                    result = await original_get_available_tables(user_id)
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
                    if isinstance(result, dict) and "tables" in result:
                        tables = result["tables"]
                        database_name = result.get("database_name", "unknown")
                        
                        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ç–∞–±–ª–∏—Ü—ã –ø–æ —Å—Ö–µ–º–∞–º
                        schemas = {}
                        for table in tables:
                            schema_name = table.get("schema_name", "public")
                            if schema_name not in schemas:
                                schemas[schema_name] = []
                            schemas[schema_name].append(table.get("table_name", "unknown"))
                        
                        # –õ–æ–≥–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ö–µ–º–∞—Ö
                        logger.info(f"üìä API: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø –∫ {len(schemas)} —Å—Ö–µ–º–∞–º")
                        for schema_name, table_names in schemas.items():
                            logger.info(f"   üìÇ –°—Ö–µ–º–∞ '{schema_name}': {len(table_names)} —Ç–∞–±–ª–∏—Ü")
                            logger.debug(f"      üìã –¢–∞–±–ª–∏—Ü—ã: {', '.join(table_names)}")
                        
                        # –õ–æ–≥–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø –∫ –∫–∞–∂–¥–æ–π —Å—Ö–µ–º–µ
                        for schema_name, table_names in schemas.items():
                            for table_name in table_names:
                                schema_monitor.log_schema_access(
                                    user_id=user_id,
                                    schema_name=schema_name,
                                    table_name=table_name,
                                    access_type="list",
                                    success=True
                                )
                    
                    return result
                    
                except Exception as e:
                    logger.error(f"‚ùå API: –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {str(e)}")
                    raise
            
            # –ó–∞–º–µ–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
            import api.database
            api.database.get_available_tables = enhanced_get_available_tables
            logger.info("‚úÖ –ü–∞—Ç—á –ø—Ä–∏–º–µ–Ω–µ–Ω: get_available_tables")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–∏ –ø–∞—Ç—á–∞ get_available_tables: {str(e)}")
    
    # –ü–∞—Ç—á–∏–º endpoint get_table_sample
    def patch_get_table_sample():
        """–î–æ–±–∞–≤–ª—è–µ—Ç –¥–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ get_table_sample"""
        try:
            from api.database import get_table_sample as original_get_table_sample
            
            @wraps(original_get_table_sample)
            async def enhanced_get_table_sample(
                table_name: str, 
                user_id: str = None, 
                limit: int = 5
            ):
                logger.info(f"üîç API: –ó–∞–ø—Ä–æ—Å –æ–±—Ä–∞–∑—Ü–∞ –¥–∞–Ω–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü—ã {table_name} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º schema_name –∏–∑ table_name –µ—Å–ª–∏ –µ—Å—Ç—å
                schema_name = "public"  # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                if "." in table_name:
                    parts = table_name.split(".")
                    if len(parts) == 2:
                        schema_name, table_name = parts
                
                logger.info(f"üìä API: –°—Ö–µ–º–∞: {schema_name}, –¢–∞–±–ª–∏—Ü–∞: {table_name}")
                
                try:
                    # –í—ã–∑—ã–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
                    result = await original_get_table_sample(table_name, user_id, limit)
                    
                    # –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—ã–π –¥–æ—Å—Ç—É–ø
                    schema_monitor.log_schema_access(
                        user_id=user_id,
                        schema_name=schema_name,
                        table_name=table_name,
                        access_type="sample",
                        success=True
                    )
                    
                    logger.info(f"‚úÖ API: –£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω –æ–±—Ä–∞–∑–µ—Ü –¥–∞–Ω–Ω—ã—Ö –∏–∑ {schema_name}.{table_name}")
                    return result
                    
                except Exception as e:
                    # –õ–æ–≥–∏—Ä—É–µ–º –Ω–µ—É–¥–∞—á–Ω—ã–π –¥–æ—Å—Ç—É–ø
                    schema_monitor.log_schema_access(
                        user_id=user_id,
                        schema_name=schema_name,
                        table_name=table_name,
                        access_type="sample",
                        success=False
                    )
                    
                    schema_monitor.log_schema_validation_error(
                        user_id=user_id,
                        schema_name=schema_name,
                        error_message=str(e)
                    )
                    
                    logger.error(f"‚ùå API: –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ–±—Ä–∞–∑—Ü–∞ –∏–∑ {schema_name}.{table_name}: {str(e)}")
                    raise
            
            # –ó–∞–º–µ–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
            import api.database
            api.database.get_table_sample = enhanced_get_table_sample
            logger.info("‚úÖ –ü–∞—Ç—á –ø—Ä–∏–º–µ–Ω–µ–Ω: get_table_sample")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–∏ –ø–∞—Ç—á–∞ get_table_sample: {str(e)}")
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–∞—Ç—á–∏
    patch_get_available_tables()
    patch_get_table_sample()


def enhance_llm_service_logging():
    """
    –£–ª—É—á—à–∞–µ—Ç –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ LLM —Å–µ—Ä–≤–∏—Å–µ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ SQL –∑–∞–ø—Ä–æ—Å–æ–≤
    """
    
    def patch_llm_service():
        """–î–æ–±–∞–≤–ª—è–µ—Ç –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ö–µ–º –≤ LLM —Å–µ—Ä–≤–∏—Å"""
        try:
            from services.llm_service import LLMService
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥
            original_create_sql_prompt = LLMService._create_sql_prompt_with_user_permissions
            
            def enhanced_create_sql_prompt(self, natural_query: str, user_id: str, user_language: str = "en"):
                logger.info(f"ü§ñ LLM: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è SQL –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                logger.info(f"üìù LLM: –ó–∞–ø—Ä–æ—Å: {natural_query}")
                
                try:
                    # –í—ã–∑—ã–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥
                    result = original_create_sql_prompt(self, natural_query, user_id, user_language)
                    
                    # –õ–æ–≥–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ö–µ–º–µ –∏–∑ –ø—Ä–æ–º–ø—Ç–∞
                    if "demo1" in result:
                        logger.info(f"üìä LLM: –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å—Ö–µ–º–∞ 'demo1' –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                        schema_monitor.log_schema_access(
                            user_id=user_id,
                            schema_name="demo1",
                            table_name="bills_view",
                            access_type="llm_generation",
                            success=True
                        )
                    
                    return result
                    
                except Exception as e:
                    logger.error(f"‚ùå LLM: –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ SQL –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {str(e)}")
                    raise
            
            # –ó–∞–º–µ–Ω—è–µ–º –º–µ—Ç–æ–¥
            LLMService._create_sql_prompt_with_user_permissions = enhanced_create_sql_prompt
            logger.info("‚úÖ –ü–∞—Ç—á –ø—Ä–∏–º–µ–Ω–µ–Ω: LLMService._create_sql_prompt_with_user_permissions")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–∏ –ø–∞—Ç—á–∞ LLM —Å–µ—Ä–≤–∏—Å–∞: {str(e)}")


def enhance_app_database_logging():
    """
    –£–ª—É—á—à–∞–µ—Ç –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ AppDatabaseService
    """
    
    def patch_get_user_accessible_tables():
        """–î–æ–±–∞–≤–ª—è–µ—Ç –¥–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ get_user_accessible_tables"""
        try:
            from services.app_database import AppDatabaseService
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥
            original_get_user_accessible_tables = AppDatabaseService.get_user_accessible_tables
            
            async def enhanced_get_user_accessible_tables(self, user_id: str, database_name: str):
                logger.info(f"üóÑÔ∏è  DB: –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –≤ –ë–î {database_name}")
                
                try:
                    # –í—ã–∑—ã–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥
                    result = await original_get_user_accessible_tables(self, user_id, database_name)
                    
                    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                    if result:
                        schemas = {}
                        for table in result:
                            schema_name = table.get("schema_name", "public")
                            if schema_name not in schemas:
                                schemas[schema_name] = []
                            schemas[schema_name].append(table.get("table_name", "unknown"))
                        
                        logger.info(f"üìä DB: –ù–∞–π–¥–µ–Ω–æ {len(schemas)} —Å—Ö–µ–º –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                        for schema_name, table_names in schemas.items():
                            logger.info(f"   üìÇ –°—Ö–µ–º–∞ '{schema_name}': {len(table_names)} —Ç–∞–±–ª–∏—Ü")
                            
                            # –õ–æ–≥–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø –∫ –∫–∞–∂–¥–æ–π —Ç–∞–±–ª–∏—Ü–µ –≤ —Å—Ö–µ–º–µ
                            for table_name in table_names:
                                schema_monitor.log_schema_access(
                                    user_id=user_id,
                                    schema_name=schema_name,
                                    table_name=table_name,
                                    access_type="permission_check",
                                    success=True
                                )
                    else:
                        logger.warning(f"‚ö†Ô∏è  DB: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –Ω–∏ –∫ –æ–¥–Ω–æ–π —Ç–∞–±–ª–∏—Ü–µ")
                    
                    return result
                    
                except Exception as e:
                    logger.error(f"‚ùå DB: –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {str(e)}")
                    raise
            
            # –ó–∞–º–µ–Ω—è–µ–º –º–µ—Ç–æ–¥
            AppDatabaseService.get_user_accessible_tables = enhanced_get_user_accessible_tables
            logger.info("‚úÖ –ü–∞—Ç—á –ø—Ä–∏–º–µ–Ω–µ–Ω: AppDatabaseService.get_user_accessible_tables")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–∏ –ø–∞—Ç—á–∞ AppDatabaseService: {str(e)}")


def initialize_schema_logging():
    """
    –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤—Å–µ —É–ª—É—á—à–µ–Ω–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ö–µ–º
    """
    logger.info("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ö–µ–º")
    
    try:
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –≤—Å–µ –ø–∞—Ç—á–∏
        enhance_database_api_logging()
        enhance_llm_service_logging()
        enhance_app_database_logging()
        
        logger.info("‚úÖ –í—Å–µ –ø–∞—Ç—á–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ö–µ–º –ø—Ä–∏–º–µ–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ö–µ–º: {str(e)}")


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞ –æ —Å—Ö–µ–º–∞—Ö
async def generate_schema_report(user_id: str = None, database_name: str = None) -> Dict[str, Any]:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç –æ —Å—Ö–µ–º–∞—Ö –∏ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü–∞—Ö
    
    Args:
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        database_name: –ò–º—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    
    Returns:
        Dict —Å –æ—Ç—á–µ—Ç–æ–º –æ —Å—Ö–µ–º–∞—Ö
    """
    logger.info("üìä –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –æ —Å—Ö–µ–º–∞—Ö")
    
    try:
        from services.app_database import app_database_service
        from services.data_database import data_database_service
        
        if not database_name:
            database_name = data_database_service.get_database_name()
        
        report = {
            "timestamp": datetime.now().isoformat(),
            "database_name": database_name,
            "user_specific": user_id is not None,
            "user_id": user_id,
            "schemas": {},
            "summary": {}
        }
        
        if user_id:
            # –û—Ç—á–µ—Ç –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            accessible_tables = await app_database_service.get_user_accessible_tables(
                user_id=user_id, 
                database_name=database_name
            )
            
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Å—Ö–µ–º–∞–º
            schemas = {}
            for table in accessible_tables:
                schema_name = table.get("schema_name", "public")
                if schema_name not in schemas:
                    schemas[schema_name] = []
                schemas[schema_name].append({
                    "table_name": table.get("table_name"),
                    "object_type": table.get("object_type", "table"),
                    "description": table.get("description", "")
                })
            
            report["schemas"] = schemas
            report["summary"] = {
                "total_schemas": len(schemas),
                "total_tables": len(accessible_tables),
                "schemas_list": list(schemas.keys())
            }
            
        else:
            # –û–±—â–∏–π –æ—Ç—á–µ—Ç –ø–æ –≤—Å–µ–º —Å—Ö–µ–º–∞–º
            all_descriptions = await app_database_service.get_all_table_descriptions(
                database_name=database_name
            )
            
            schemas = {}
            for key, description in all_descriptions.items():
                # key format: "database.schema.table"
                parts = key.split(".")
                if len(parts) >= 3:
                    schema_name = parts[-2]
                    table_name = parts[-1]
                    
                    if schema_name not in schemas:
                        schemas[schema_name] = []
                    
                    schemas[schema_name].append({
                        "table_name": table_name,
                        "object_type": description.get("object_type", "table"),
                        "description": description.get("description", "")
                    })
            
            report["schemas"] = schemas
            report["summary"] = {
                "total_schemas": len(schemas),
                "total_tables": len(all_descriptions),
                "schemas_list": list(schemas.keys())
            }
        
        # –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
        logger.info(f"üìã –û—Ç—á–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω: {report['summary']}")
        
        return report
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞ –æ —Å—Ö–µ–º–∞—Ö: {str(e)}")
        return {"error": str(e)}


# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ –º–æ–¥—É–ª—è
if __name__ != "__main__":
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –º–æ–¥—É–ª—å –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è
    try:
        initialize_schema_logging()
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {str(e)}")


if __name__ == "__main__":
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥—É–ª—è
    import asyncio
    
    async def test_integration():
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
        logger.info("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ö–µ–º")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        initialize_schema_logging()
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç
        report = await generate_schema_report()
        logger.info(f"üìä –¢–µ—Å—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç: {report}")
        
        logger.info("‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
    
    asyncio.run(test_integration())


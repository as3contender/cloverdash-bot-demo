#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ schema_name —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ç–∞–±–ª–∏—Ü–∞–º–∏.

–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –ª–æ–≥–∏—Ä—É–µ—Ç:
1. –ö–∞–∫–∏–µ —Å—Ö–µ–º—ã –¥–æ—Å—Ç—É–ø–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
2. –ö–∞–∫–∏–µ —Ç–∞–±–ª–∏—Ü—ã –¥–æ—Å—Ç—É–ø–Ω—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–∞–∂–¥–æ–π —Å—Ö–µ–º–µ
3. –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –º–µ–∂–¥—É schema_name –∏ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏ –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ —Ç–∞–±–ª–∏—Ü–∞–º–∏
4. –ü—Ä–æ–±–ª–µ–º—ã —Å –ø—Ä–∞–≤–∞–º–∏ –¥–æ—Å—Ç—É–ø–∞ –∫ —Å—Ö–µ–º–∞–º
"""

import asyncio
import logging
import json
from datetime import datetime
from typing import Dict, List, Any, Optional
from pathlib import Path

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('schema_validation.log', encoding='utf-8'),
        logging.StreamHandler()
    ]
)

logger = logging.getLogger(__name__)

class SchemaValidationLogger:
    """–ö–ª–∞—Å—Å –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ö–µ–º –∏ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü"""
    
    def __init__(self):
        self.log_file = Path("schema_validation.log")
        self.validation_results = []
    
    async def validate_schema_access(self, user_id: str, database_name: str) -> Dict[str, Any]:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ —Å—Ö–µ–º–∞–º –∏ —Ç–∞–±–ª–∏—Ü–∞–º
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            database_name: –ò–º—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            
        Returns:
            Dict —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏
        """
        try:
            from services.app_database import app_database_service
            from services.data_database import data_database_service
            
            logger.info(f"üîç –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Å—Ö–µ–º –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –≤ –ë–î {database_name}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–∞–º –¥–∞–Ω–Ω—ã—Ö
            if not app_database_service.is_connected:
                logger.error("‚ùå –ë–∞–∑–∞ –æ–ø–∏—Å–∞–Ω–∏–π –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
                return {"error": "–ë–∞–∑–∞ –æ–ø–∏—Å–∞–Ω–∏–π –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"}
            
            if not data_database_service.is_connected:
                logger.error("‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
                return {"error": "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"}
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            accessible_tables = await app_database_service.get_user_accessible_tables(
                user_id=user_id, 
                database_name=database_name
            )
            
            logger.info(f"üìä –ü–æ–ª—É—á–µ–Ω–æ {len(accessible_tables)} –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ç–∞–±–ª–∏—Ü—ã –ø–æ —Å—Ö–µ–º–∞–º
            schemas_info = self._group_tables_by_schema(accessible_tables)
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—É—é —Å—Ö–µ–º—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            full_schema = await app_database_service.get_database_schema(
                database_name=database_name,
                include_views=True,
                schema_name=None  # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å—Ö–µ–º—ã
            )
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å—Ö–µ–º
            schema_analysis = self._analyze_schema_access(schemas_info, full_schema, user_id)
            
            # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            self._log_schema_validation_results(user_id, database_name, schema_analysis)
            
            return {
                "user_id": user_id,
                "database_name": database_name,
                "accessible_tables_count": len(accessible_tables),
                "schemas_info": schemas_info,
                "schema_analysis": schema_analysis,
                "timestamp": datetime.now().isoformat()
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ö–µ–º –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {str(e)}")
            return {"error": str(e)}
    
    def _group_tables_by_schema(self, tables: List[Dict[str, Any]]) -> Dict[str, List[Dict[str, Any]]]:
        """–ì—Ä—É–ø–ø–∏—Ä—É–µ—Ç —Ç–∞–±–ª–∏—Ü—ã –ø–æ —Å—Ö–µ–º–∞–º"""
        schemas = {}
        
        for table in tables:
            schema_name = table.get("schema_name", "public")
            if schema_name not in schemas:
                schemas[schema_name] = []
            schemas[schema_name].append(table)
        
        logger.info(f"üìÅ –ù–∞–π–¥–µ–Ω–æ —Å—Ö–µ–º: {list(schemas.keys())}")
        for schema_name, tables_in_schema in schemas.items():
            logger.info(f"   üìÇ –°—Ö–µ–º–∞ '{schema_name}': {len(tables_in_schema)} —Ç–∞–±–ª–∏—Ü")
        
        return schemas
    
    def _analyze_schema_access(self, user_schemas: Dict[str, List], full_schema: Dict[str, Any], user_id: str) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å—Ö–µ–º –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        analysis = {
            "accessible_schemas": list(user_schemas.keys()),
            "schema_details": {},
            "issues": [],
            "recommendations": []
        }
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é –¥–æ—Å—Ç—É–ø–Ω—É—é —Å—Ö–µ–º—É
        for schema_name, tables in user_schemas.items():
            schema_detail = {
                "tables_count": len(tables),
                "tables": [t["table_name"] for t in tables],
                "object_types": {}
            }
            
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Ç–∏–ø—ã –æ–±—ä–µ–∫—Ç–æ–≤
            for table in tables:
                obj_type = table.get("object_type", "table")
                if obj_type not in schema_detail["object_types"]:
                    schema_detail["object_types"][obj_type] = 0
                schema_detail["object_types"][obj_type] += 1
            
            analysis["schema_details"][schema_name] = schema_detail
            
            logger.info(f"‚úÖ –°—Ö–µ–º–∞ '{schema_name}' –¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            logger.info(f"   üìä –¢–∞–±–ª–∏—Ü: {schema_detail['tables_count']}")
            logger.info(f"   üìã –¢–∏–ø—ã –æ–±—ä–µ–∫—Ç–æ–≤: {schema_detail['object_types']}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å—Ö–µ–º—ã, –∫ –∫–æ—Ç–æ—Ä—ã–º —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞
        all_schemas_in_db = set()
        for table_name, table_info in full_schema.items():
            schema_name = table_info.get("schema_name", "public")
            all_schemas_in_db.add(schema_name)
        
        accessible_schemas = set(user_schemas.keys())
        restricted_schemas = all_schemas_in_db - accessible_schemas
        
        if restricted_schemas:
            analysis["issues"].append(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —Å—Ö–µ–º–∞–º: {list(restricted_schemas)}")
            logger.warning(f"‚ö†Ô∏è  –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —Å—Ö–µ–º–∞–º: {list(restricted_schemas)}")
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        if not user_schemas:
            analysis["recommendations"].append("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –Ω–∏ –∫ –æ–¥–Ω–æ–π —Å—Ö–µ–º–µ")
            logger.warning(f"‚ö†Ô∏è  –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –Ω–∏ –∫ –æ–¥–Ω–æ–π —Å—Ö–µ–º–µ")
        elif len(user_schemas) == 1 and "public" in user_schemas:
            analysis["recommendations"].append("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –∫ —Å—Ö–µ–º–µ 'public'")
            logger.info(f"‚ÑπÔ∏è  –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –∫ —Å—Ö–µ–º–µ 'public'")
        
        return analysis
    
    def _log_schema_validation_results(self, user_id: str, database_name: str, analysis: Dict[str, Any]):
        """–õ–æ–≥–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ö–µ–º"""
        logger.info("=" * 80)
        logger.info(f"üìã –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–†–û–í–ï–†–ö–ò –°–•–ï–ú –î–õ–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø {user_id}")
        logger.info(f"üóÑÔ∏è  –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {database_name}")
        logger.info(f"‚è∞ –í—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        logger.info("=" * 80)
        
        # –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ö–µ–º—ã
        accessible_schemas = analysis.get("accessible_schemas", [])
        logger.info(f"‚úÖ –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ö–µ–º—ã ({len(accessible_schemas)}): {accessible_schemas}")
        
        # –î–µ—Ç–∞–ª–∏ –ø–æ —Å—Ö–µ–º–∞–º
        schema_details = analysis.get("schema_details", {})
        for schema_name, details in schema_details.items():
            logger.info(f"üìÇ –°—Ö–µ–º–∞ '{schema_name}':")
            logger.info(f"   üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–∞–±–ª–∏—Ü: {details['tables_count']}")
            logger.info(f"   üìã –¢–∏–ø—ã –æ–±—ä–µ–∫—Ç–æ–≤: {details['object_types']}")
            logger.info(f"   üìù –¢–∞–±–ª–∏—Ü—ã: {', '.join(details['tables'])}")
        
        # –ü—Ä–æ–±–ª–µ–º—ã
        issues = analysis.get("issues", [])
        if issues:
            logger.warning("‚ö†Ô∏è  –ü–†–û–ë–õ–ï–ú–´:")
            for issue in issues:
                logger.warning(f"   ‚Ä¢ {issue}")
        else:
            logger.info("‚úÖ –ü—Ä–æ–±–ª–µ–º –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ")
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        recommendations = analysis.get("recommendations", [])
        if recommendations:
            logger.info("üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
            for rec in recommendations:
                logger.info(f"   ‚Ä¢ {rec}")
        
        logger.info("=" * 80)
    
    async def validate_multiple_users(self, user_ids: List[str], database_name: str) -> Dict[str, Any]:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø –∫ —Å—Ö–µ–º–∞–º –¥–ª—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        logger.info(f"üîÑ –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Å—Ö–µ–º –¥–ª—è {len(user_ids)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        
        results = {}
        for user_id in user_ids:
            logger.info(f"üë§ –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_id}")
            result = await self.validate_schema_access(user_id, database_name)
            results[user_id] = result
        
        # –°–≤–æ–¥–Ω—ã–π –æ—Ç—á–µ—Ç
        self._generate_summary_report(results, database_name)
        
        return results
    
    def _generate_summary_report(self, results: Dict[str, Any], database_name: str):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–≤–æ–¥–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"""
        logger.info("=" * 100)
        logger.info("üìä –°–í–û–î–ù–´–ô –û–¢–ß–ï–¢ –ü–û –ü–†–û–í–ï–†–ö–ï –°–•–ï–ú")
        logger.info(f"üóÑÔ∏è  –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {database_name}")
        logger.info(f"üë• –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(results)}")
        logger.info("=" * 100)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ö–µ–º–∞–º
        all_schemas = set()
        user_schema_counts = {}
        
        for user_id, result in results.items():
            if "error" not in result:
                schemas = result.get("schemas_info", {})
                user_schema_counts[user_id] = len(schemas)
                all_schemas.update(schemas.keys())
            else:
                user_schema_counts[user_id] = 0
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {result['error']}")
        
        logger.info(f"üìÇ –í—Å–µ–≥–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å—Ö–µ–º –≤ —Å–∏—Å—Ç–µ–º–µ: {len(all_schemas)}")
        logger.info(f"üìã –°—Ö–µ–º—ã: {sorted(all_schemas)}")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–æ—Å—Ç—É–ø–∞
        logger.info("üë• –î–æ—Å—Ç—É–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∫ —Å—Ö–µ–º–∞–º:")
        for user_id, schema_count in user_schema_counts.items():
            logger.info(f"   ‚Ä¢ {user_id}: {schema_count} —Å—Ö–µ–º")
        
        logger.info("=" * 100)
    
    def save_results_to_file(self, results: Dict[str, Any], filename: str = None):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ JSON —Ñ–∞–π–ª"""
        if filename is None:
            filename = f"schema_validation_results_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
        
        try:
            with open(filename, 'w', encoding='utf-8') as f:
                json.dump(results, f, ensure_ascii=False, indent=2)
            logger.info(f"üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª: {filename}")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {str(e)}")


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ö–µ–º"""
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ö–µ–º –∏ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü")
    
    validator = SchemaValidationLogger()
    
    # –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è - –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    test_users = ["user1", "user2", "admin"]  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    database_name = "your_database"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω–æ–µ –∏–º—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        logger.info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:")
        single_result = await validator.validate_schema_access("user1", database_name)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        logger.info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:")
        multiple_results = await validator.validate_multiple_users(test_users, database_name)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        validator.save_results_to_file(multiple_results)
        
        logger.info("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏: {str(e)}")


if __name__ == "__main__":
    asyncio.run(main())

#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–æ–ª–∏ user_kirill –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö.

–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –ø–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏ —Å–æ–∑–¥–∞–µ—Ç —Ä–æ–ª—å —Å –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–º–∏ –ø—Ä–∞–≤–∞–º–∏.
"""

import asyncio
import logging
import sys
from datetime import datetime
import asyncpg

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('create_user_kirill_role.log', encoding='utf-8'),
        logging.StreamHandler(sys.stdout)
    ]
)

logger = logging.getLogger(__name__)


async def create_user_kirill_role():
    """–°–æ–∑–¥–∞–µ—Ç —Ä–æ–ª—å user_kirill –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö"""
    logger.info("üîß –°–æ–∑–¥–∞–Ω–∏–µ —Ä–æ–ª–∏ user_kirill –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö")
    
    connection = None
    
    try:
        from config.settings import settings
        
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞–ø—Ä—è–º—É—é –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
        logger.info("üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö...")
        connection = await asyncpg.connect(settings.data_database_url)
        logger.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        
        # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ä–æ–ª—å
        logger.info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ä–æ–ª–∏ user_kirill...")
        
        check_query = "SELECT rolname FROM pg_roles WHERE rolname = 'user_kirill'"
        result = await connection.fetch(check_query)
        
        if result:
            logger.info("‚ÑπÔ∏è  –†–æ–ª—å user_kirill —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        else:
            logger.info("‚ùå –†–æ–ª—å user_kirill –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–µ–º...")
            
            # 2. –°–æ–∑–¥–∞–µ–º —Ä–æ–ª—å
            create_role_query = "CREATE ROLE user_kirill"
            await connection.execute(create_role_query)
            logger.info("‚úÖ –†–æ–ª—å user_kirill —Å–æ–∑–¥–∞–Ω–∞")
        
        # 3. –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ —Å—Ö–µ–º—É public
        logger.info("üîê –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∞–≤ –Ω–∞ —Å—Ö–µ–º—É public...")
        
        try:
            grant_public_query = "GRANT USAGE ON SCHEMA public TO user_kirill"
            await connection.execute(grant_public_query)
            logger.info("‚úÖ –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã –ø—Ä–∞–≤–∞ –Ω–∞ —Å—Ö–µ–º—É public")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –ø—Ä–∞–≤–∞ –Ω–∞ —Å—Ö–µ–º—É public: {str(e)}")
        
        # 4. –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ —Å—Ö–µ–º—É demo1
        logger.info("üîê –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∞–≤ –Ω–∞ —Å—Ö–µ–º—É demo1...")
        
        try:
            grant_demo1_query = "GRANT USAGE ON SCHEMA demo1 TO user_kirill"
            await connection.execute(grant_demo1_query)
            logger.info("‚úÖ –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã –ø—Ä–∞–≤–∞ –Ω–∞ —Å—Ö–µ–º—É demo1")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –ø—Ä–∞–≤–∞ –Ω–∞ —Å—Ö–µ–º—É demo1: {str(e)}")
        
        # 5. –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ bills_view (–∏–∑ user_permissions)
        logger.info("üîê –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∞–≤ –Ω–∞ bills_view...")
        
        try:
            grant_bills_view_query = "GRANT SELECT ON demo1.bills_view TO user_kirill"
            await connection.execute(grant_bills_view_query)
            logger.info("‚úÖ –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã –ø—Ä–∞–≤–∞ SELECT –Ω–∞ demo1.bills_view")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –ø—Ä–∞–≤–∞ –Ω–∞ bills_view: {str(e)}")
        
        # 6. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–Ω—É—é —Ä–æ–ª—å
        logger.info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–∑–¥–∞–Ω–Ω–æ–π —Ä–æ–ª–∏...")
        
        check_role_query = """
        SELECT rolname, rolsuper, rolinherit, rolcreaterole, rolcreatedb, rolcanlogin
        FROM pg_roles 
        WHERE rolname = 'user_kirill'
        """
        result = await connection.fetch(check_role_query)
        
        if result:
            role_info = result[0]
            logger.info("‚úÖ –†–æ–ª—å user_kirill —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞:")
            logger.info(f"   ‚Ä¢ –ò–º—è: {role_info['rolname']}")
            logger.info(f"   ‚Ä¢ Superuser: {role_info['rolsuper']}")
            logger.info(f"   ‚Ä¢ Can login: {role_info['rolcanlogin']}")
            logger.info(f"   ‚Ä¢ Create role: {role_info['rolcreaterole']}")
            logger.info(f"   ‚Ä¢ Create DB: {role_info['rolcreatedb']}")
        else:
            logger.error("‚ùå –†–æ–ª—å user_kirill –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è")
            return False
        
        # 7. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ bills_view
        logger.info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –Ω–∞ bills_view...")
        
        try:
            test_query = "SELECT COUNT(*) FROM demo1.bills_view"
            result = await connection.fetch(test_query)
            logger.info(f"‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –∫ bills_view –≤—ã–ø–æ–ª–Ω–µ–Ω: {result[0]['count']} —Å—Ç—Ä–æ–∫")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –∫ bills_view: {str(e)}")
        
        logger.info("üéâ –°–æ–∑–¥–∞–Ω–∏–µ —Ä–æ–ª–∏ user_kirill –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
        return False
    
    finally:
        if connection:
            await connection.close()
            logger.info("üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–æ")


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    logger.info("üöÄ –°–æ–∑–¥–∞–Ω–∏–µ —Ä–æ–ª–∏ user_kirill")
    logger.info(f"‚è∞ –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    logger.info("=" * 80)
    
    try:
        success = await create_user_kirill_role()
        
        if success:
            logger.info("üéØ –°–æ–∑–¥–∞–Ω–∏–µ —Ä–æ–ª–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
            return 0
        else:
            logger.error("üí• –°–æ–∑–¥–∞–Ω–∏–µ —Ä–æ–ª–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —Å –æ—à–∏–±–∫–∞–º–∏!")
            return 1
            
    except Exception as e:
        logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
        return 1


if __name__ == "__main__":
    exit_code = asyncio.run(main())
    sys.exit(exit_code)


#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ user_id –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ä–æ–ª—å—é user_kirill.
"""

import asyncio
import logging
import sys
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('find_correct_user_id.log', encoding='utf-8'),
        logging.StreamHandler(sys.stdout)
    ]
)

logger = logging.getLogger(__name__)


async def find_correct_user_id():
    """–ò—â–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π user_id –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ä–æ–ª—å—é user_kirill"""
    logger.info("üîç –ü–æ–∏—Å–∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ user_id –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ä–æ–ª—å—é user_kirill")
    
    try:
        from services.app_database import app_database_service
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        await app_database_service.initialize()
        
        if not app_database_service.is_connected:
            logger.error("‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
            return False
        
        logger.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        
        # 1. –ò—â–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ —Å —Ä–æ–ª—å—é user_kirill
        logger.info("üîç –ü–æ–∏—Å–∫ –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π —Å —Ä–æ–ª—å—é user_kirill...")
        
        try:
            query = """
            SELECT user_id, role_name, database_name, schema_name, created_at 
            FROM users_role_bd_mapping 
            WHERE role_name = 'user_kirill'
            """
            result = await app_database_service.execute_query(query)
            
            logger.info(f"üìä –ù–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π —Å —Ä–æ–ª—å—é user_kirill: {result.row_count}")
            
            if result.data:
                logger.info("üìã –ó–∞–ø–∏—Å–∏ —Å —Ä–æ–ª—å—é user_kirill:")
                for i, mapping in enumerate(result.data, 1):
                    logger.info(f"   {i}. User ID: {mapping['user_id']}")
                    logger.info(f"      Role: {mapping.get('role_name', 'N/A')}")
                    logger.info(f"      Database: {mapping.get('database_name', 'N/A')}")
                    logger.info(f"      Schema: {mapping.get('schema_name', 'N/A')}")
                    logger.info(f"      Created: {mapping.get('created_at', 'N/A')}")
                    logger.info("")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —ç—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Ç–∞–±–ª–∏—Ü–µ users
                    user_query = "SELECT id, email, name FROM users WHERE id = $1"
                    user_result = await app_database_service.execute_query(user_query, [mapping['user_id']])
                    
                    if user_result.data:
                        user = user_result.data[0]
                        logger.info(f"   ‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω –≤ —Ç–∞–±–ª–∏—Ü–µ users:")
                        logger.info(f"      ID: {user['id']}")
                        logger.info(f"      Email: {user.get('email', 'N/A')}")
                        logger.info(f"      Name: {user.get('name', 'N/A')}")
                    else:
                        logger.info(f"   ‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ù–ï –Ω–∞–π–¥–µ–Ω –≤ —Ç–∞–±–ª–∏—Ü–µ users")
                    logger.info("")
            else:
                logger.info("‚ÑπÔ∏è  –ó–∞–ø–∏—Å–µ–π —Å —Ä–æ–ª—å—é user_kirill –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∑–∞–ø–∏—Å–µ–π —Å —Ä–æ–ª—å—é user_kirill: {str(e)}")
        
        # 2. –ò—â–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏, —Å–æ–¥–µ—Ä–∂–∞—â–∏–µ "639c-40bd-a645-31dcaa68871b"
        logger.info("üîç –ü–æ–∏—Å–∫ –∑–∞–ø–∏—Å–µ–π, —Å–æ–¥–µ—Ä–∂–∞—â–∏—Ö '639c-40bd-a645-31dcaa68871b'...")
        
        try:
            query = """
            SELECT user_id, role_name, database_name, schema_name, created_at 
            FROM users_role_bd_mapping 
            WHERE user_id::VARCHAR LIKE '%639c-40bd-a645-31dcaa68871b%'
            """
            result = await app_database_service.execute_query(query)
            
            logger.info(f"üìä –ù–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π, —Å–æ–¥–µ—Ä–∂–∞—â–∏—Ö '639c-40bd-a645-31dcaa68871b': {result.row_count}")
            
            if result.data:
                logger.info("üìã –ó–∞–ø–∏—Å–∏, —Å–æ–¥–µ—Ä–∂–∞—â–∏–µ '639c-40bd-a645-31dcaa68871b':")
                for i, mapping in enumerate(result.data, 1):
                    logger.info(f"   {i}. User ID: {mapping['user_id']}")
                    logger.info(f"      Role: {mapping.get('role_name', 'N/A')}")
                    logger.info(f"      Database: {mapping.get('database_name', 'N/A')}")
                    logger.info(f"      Schema: {mapping.get('schema_name', 'N/A')}")
                    logger.info(f"      Created: {mapping.get('created_at', 'N/A')}")
                    logger.info("")
            else:
                logger.info("‚ÑπÔ∏è  –ó–∞–ø–∏—Å–µ–π, —Å–æ–¥–µ—Ä–∂–∞—â–∏—Ö '639c-40bd-a645-31dcaa68871b', –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∑–∞–ø–∏—Å–µ–π —Å —á–∞—Å—Ç–∏—á–Ω—ã–º UUID: {str(e)}")
        
        # 3. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ –≤ users_role_bd_mapping
        logger.info("üìã –í—Å–µ –∑–∞–ø–∏—Å–∏ –≤ users_role_bd_mapping:")
        
        try:
            query = """
            SELECT user_id, role_name, database_name, schema_name, created_at 
            FROM users_role_bd_mapping 
            ORDER BY created_at DESC
            """
            result = await app_database_service.execute_query(query)
            
            logger.info(f"üìä –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π –≤ users_role_bd_mapping: {result.row_count}")
            
            if result.data:
                for i, mapping in enumerate(result.data, 1):
                    logger.info(f"   {i}. User ID: {mapping['user_id']}")
                    logger.info(f"      Role: {mapping.get('role_name', 'N/A')}")
                    logger.info(f"      Database: {mapping.get('database_name', 'N/A')}")
                    logger.info(f"      Schema: {mapping.get('schema_name', 'N/A')}")
                    logger.info(f"      Created: {mapping.get('created_at', 'N/A')}")
                    logger.info("")
                    
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π: {str(e)}")
        
        logger.info("üéâ –ü–æ–∏—Å–∫ user_id –∑–∞–≤–µ—Ä—à–µ–Ω!")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
        return False
    
    finally:
        try:
            await app_database_service.close()
            logger.info("üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∑–∞–∫—Ä—ã—Ç–æ")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {str(e)}")


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    logger.info("üîß –ü–æ–∏—Å–∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ user_id")
    logger.info(f"‚è∞ –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    logger.info("=" * 80)
    
    try:
        success = await find_correct_user_id()
        
        if success:
            logger.info("üéØ –ü–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
            return 0
        else:
            logger.error("üí• –ü–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω —Å –æ—à–∏–±–∫–∞–º–∏!")
            return 1
            
    except Exception as e:
        logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
        return 1


if __name__ == "__main__":
    exit_code = asyncio.run(main())
    sys.exit(exit_code)


#!/usr/bin/env python3
"""
–ú–æ–¥—É–ª—å –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ö–µ–º –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.

–ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ—Ç—Å—è —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Å–∏—Å—Ç–µ–º–æ–π –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è:
- –î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å—Ö–µ–º –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
- –ò–∑–º–µ–Ω–µ–Ω–∏–π –≤ –ø—Ä–∞–≤–∞—Ö –¥–æ—Å—Ç—É–ø–∞ –∫ —Å—Ö–µ–º–∞–º
- –ü—Ä–æ–±–ª–µ–º —Å schema_name –≤ –∑–∞–ø—Ä–æ—Å–∞—Ö
"""

import logging
import asyncio
from datetime import datetime, timedelta
from typing import Dict, List, Any, Optional
from functools import wraps

logger = logging.getLogger(__name__)

class SchemaMonitor:
    """–ö–ª–∞—Å—Å –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å—Ö–µ–º –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    
    def __init__(self):
        self.schema_cache = {}
        self.user_access_cache = {}
        self.last_check = None
    
    def log_schema_access(self, user_id: str, schema_name: str, table_name: str, 
                         access_type: str = "read", success: bool = True):
        """
        –õ–æ–≥–∏—Ä—É–µ—Ç –¥–æ—Å—Ç—É–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ —Å—Ö–µ–º–µ
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            schema_name: –ò–º—è —Å—Ö–µ–º—ã
            table_name: –ò–º—è —Ç–∞–±–ª–∏—Ü—ã
            access_type: –¢–∏–ø –¥–æ—Å—Ç—É–ø–∞ (read, write, execute)
            success: –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –¥–æ—Å—Ç—É–ø–∞
        """
        timestamp = datetime.now()
        status = "‚úÖ" if success else "‚ùå"
        
        logger.info(
            f"{status} –°–•–ï–ú–ê: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} | "
            f"–°—Ö–µ–º–∞: {schema_name} | –¢–∞–±–ª–∏—Ü–∞: {table_name} | "
            f"–¢–∏–ø: {access_type} | –í—Ä–µ–º—è: {timestamp.strftime('%H:%M:%S')}"
        )
        
        # –ö—ç—à–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ—Å—Ç—É–ø–µ
        cache_key = f"{user_id}:{schema_name}"
        if cache_key not in self.user_access_cache:
            self.user_access_cache[cache_key] = {
                "last_access": timestamp,
                "access_count": 0,
                "tables_accessed": set(),
                "failed_attempts": 0
            }
        
        cache_entry = self.user_access_cache[cache_key]
        cache_entry["last_access"] = timestamp
        cache_entry["tables_accessed"].add(table_name)
        
        if success:
            cache_entry["access_count"] += 1
        else:
            cache_entry["failed_attempts"] += 1
            logger.warning(
                f"‚ö†Ô∏è  –ù–ï–£–î–ê–ß–ù–´–ô –î–û–°–¢–£–ü: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ —Å–º–æ–≥ –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø "
                f"–∫ —Ç–∞–±–ª–∏—Ü–µ {schema_name}.{table_name}"
            )
    
    def log_schema_validation_error(self, user_id: str, schema_name: str, 
                                   error_message: str, query: str = None):
        """
        –õ–æ–≥–∏—Ä—É–µ—Ç –æ—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å—Ö–µ–º—ã
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            schema_name: –ò–º—è —Å—Ö–µ–º—ã
            error_message: –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
            query: SQL –∑–∞–ø—Ä–æ—Å (–µ—Å–ª–∏ –µ—Å—Ç—å)
        """
        logger.error(
            f"‚ùå –û–®–ò–ë–ö–ê –°–•–ï–ú–´: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} | "
            f"–°—Ö–µ–º–∞: {schema_name} | –û—à–∏–±–∫–∞: {error_message}"
        )
        
        if query:
            logger.debug(f"üîç –ü—Ä–æ–±–ª–µ–º–Ω—ã–π –∑–∞–ø—Ä–æ—Å: {query}")
    
    def log_schema_not_found(self, user_id: str, schema_name: str, 
                           available_schemas: List[str] = None):
        """
        –õ–æ–≥–∏—Ä—É–µ—Ç —Å–ª—É—á–∞–∏, –∫–æ–≥–¥–∞ —Å—Ö–µ–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            schema_name: –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º–∞—è —Å—Ö–µ–º–∞
            available_schemas: –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—Ö–µ–º
        """
        logger.warning(
            f"‚ö†Ô∏è  –°–•–ï–ú–ê –ù–ï –ù–ê–ô–î–ï–ù–ê: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} | "
            f"–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º–∞—è —Å—Ö–µ–º–∞: {schema_name}"
        )
        
        if available_schemas:
            logger.info(f"üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ö–µ–º—ã: {', '.join(available_schemas)}")
    
    def get_user_schema_stats(self, user_id: str) -> Dict[str, Any]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–æ—Å—Ç—É–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ —Å—Ö–µ–º–∞–º"""
        user_stats = {
            "user_id": user_id,
            "schemas_accessed": [],
            "total_access_count": 0,
            "total_failed_attempts": 0,
            "last_activity": None
        }
        
        for cache_key, cache_data in self.user_access_cache.items():
            if cache_key.startswith(f"{user_id}:"):
                schema_name = cache_key.split(":", 1)[1]
                user_stats["schemas_accessed"].append({
                    "schema_name": schema_name,
                    "access_count": cache_data["access_count"],
                    "failed_attempts": cache_data["failed_attempts"],
                    "tables_accessed": list(cache_data["tables_accessed"]),
                    "last_access": cache_data["last_access"].isoformat()
                })
                user_stats["total_access_count"] += cache_data["access_count"]
                user_stats["total_failed_attempts"] += cache_data["failed_attempts"]
                
                if (user_stats["last_activity"] is None or 
                    cache_data["last_access"] > datetime.fromisoformat(user_stats["last_activity"])):
                    user_stats["last_activity"] = cache_data["last_access"].isoformat()
        
        return user_stats
    
    def log_daily_schema_report(self):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ —Å—Ö–µ–º–∞–º"""
        logger.info("=" * 80)
        logger.info("üìä –ï–ñ–ï–î–ù–ï–í–ù–´–ô –û–¢–ß–ï–¢ –ü–û –°–•–ï–ú–ê–ú")
        logger.info(f"üìÖ –î–∞—Ç–∞: {datetime.now().strftime('%Y-%m-%d')}")
        logger.info("=" * 80)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
        unique_users = set()
        total_accesses = 0
        total_failures = 0
        
        for cache_key, cache_data in self.user_access_cache.items():
            user_id = cache_key.split(":", 1)[0]
            unique_users.add(user_id)
            total_accesses += cache_data["access_count"]
            total_failures += cache_data["failed_attempts"]
        
        logger.info(f"üë• –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(unique_users)}")
        logger.info(f"‚úÖ –í—Å–µ–≥–æ —É—Å–ø–µ—à–Ω—ã—Ö –æ–±—Ä–∞—â–µ–Ω–∏–π: {total_accesses}")
        logger.info(f"‚ùå –í—Å–µ–≥–æ –Ω–µ—É–¥–∞—á–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫: {total_failures}")
        
        if total_accesses > 0:
            success_rate = ((total_accesses - total_failures) / total_accesses) * 100
            logger.info(f"üìà –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏: {success_rate:.1f}%")
        
        # –¢–æ–ø —Å—Ö–µ–º –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é
        schema_usage = {}
        for cache_key, cache_data in self.user_access_cache.items():
            schema_name = cache_key.split(":", 1)[1]
            if schema_name not in schema_usage:
                schema_usage[schema_name] = 0
            schema_usage[schema_name] += cache_data["access_count"]
        
        if schema_usage:
            sorted_schemas = sorted(schema_usage.items(), key=lambda x: x[1], reverse=True)
            logger.info("üèÜ –¢–æ–ø —Å—Ö–µ–º –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é:")
            for schema_name, count in sorted_schemas[:5]:
                logger.info(f"   ‚Ä¢ {schema_name}: {count} –æ–±—Ä–∞—â–µ–Ω–∏–π")
        
        logger.info("=" * 80)


# –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Å—Ö–µ–º–∞–º
def log_schema_access(schema_name_param: str = "schema_name", 
                     table_name_param: str = "table_name"):
    """
    –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Å—Ö–µ–º–∞–º
    
    Args:
        schema_name_param: –ò–º—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞, —Å–æ–¥–µ—Ä–∂–∞—â–µ–≥–æ schema_name
        table_name_param: –ò–º—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞, —Å–æ–¥–µ—Ä–∂–∞—â–µ–≥–æ table_name
    """
    def decorator(func):
        @wraps(func)
        async def wrapper(*args, **kwargs):
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ kwargs
            schema_name = kwargs.get(schema_name_param, "unknown")
            table_name = kwargs.get(table_name_param, "unknown")
            user_id = kwargs.get("user_id", "unknown")
            
            # –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞—á–∞–ª–æ –¥–æ—Å—Ç—É–ø–∞
            logger.debug(f"üîç –ü–æ–ø—ã—Ç–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Å—Ö–µ–º–µ {schema_name}.{table_name} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id}")
            
            try:
                result = await func(*args, **kwargs)
                # –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—ã–π –¥–æ—Å—Ç—É–ø
                schema_monitor.log_schema_access(
                    user_id=user_id,
                    schema_name=schema_name,
                    table_name=table_name,
                    access_type="read",
                    success=True
                )
                return result
            except Exception as e:
                # –õ–æ–≥–∏—Ä—É–µ–º –Ω–µ—É–¥–∞—á–Ω—ã–π –¥–æ—Å—Ç—É–ø
                schema_monitor.log_schema_access(
                    user_id=user_id,
                    schema_name=schema_name,
                    table_name=table_name,
                    access_type="read",
                    success=False
                )
                schema_monitor.log_schema_validation_error(
                    user_id=user_id,
                    schema_name=schema_name,
                    error_message=str(e)
                )
                raise
        return wrapper
    return decorator


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–æ–Ω–∏—Ç–æ—Ä–∞
schema_monitor = SchemaMonitor()


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ API endpoints
async def log_table_access_endpoint(user_id: str, database_name: str, 
                                  schema_name: str = None, table_name: str = None):
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ç–∞–±–ª–∏—Ü–∞–º —á–µ—Ä–µ–∑ API endpoints
    
    Args:
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        database_name: –ò–º—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        schema_name: –ò–º—è —Å—Ö–µ–º—ã (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        table_name: –ò–º—è —Ç–∞–±–ª–∏—Ü—ã (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    """
    try:
        from services.app_database import app_database_service
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        accessible_tables = await app_database_service.get_user_accessible_tables(
            user_id=user_id, 
            database_name=database_name
        )
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Å—Ö–µ–º–∞–º
        schemas = {}
        for table in accessible_tables:
            table_schema = table.get("schema_name", "public")
            if table_schema not in schemas:
                schemas[table_schema] = []
            schemas[table_schema].append(table["table_name"])
        
        # –õ–æ–≥–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—Ö–µ–º–∞—Ö
        logger.info(f"üìã –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø –∫ —Å—Ö–µ–º–∞–º: {list(schemas.keys())}")
        
        # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è —Å—Ö–µ–º–∞, –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø
        if schema_name:
            if schema_name in schemas:
                logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø –∫ —Å—Ö–µ–º–µ {schema_name}")
                if table_name and table_name in schemas[schema_name]:
                    logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø –∫ —Ç–∞–±–ª–∏—Ü–µ {schema_name}.{table_name}")
                    schema_monitor.log_schema_access(user_id, schema_name, table_name, "read", True)
                elif table_name:
                    logger.warning(f"‚ö†Ô∏è  –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ù–ï –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —Ç–∞–±–ª–∏—Ü–µ {schema_name}.{table_name}")
                    schema_monitor.log_schema_access(user_id, schema_name, table_name, "read", False)
            else:
                logger.warning(f"‚ö†Ô∏è  –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ù–ï –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —Å—Ö–µ–º–µ {schema_name}")
                schema_monitor.log_schema_not_found(user_id, schema_name, list(schemas.keys()))
        
        return {
            "user_id": user_id,
            "database_name": database_name,
            "accessible_schemas": list(schemas.keys()),
            "schemas_details": schemas
        }
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–∏ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ç–∞–±–ª–∏—Ü–∞–º: {str(e)}")
        if schema_name:
            schema_monitor.log_schema_validation_error(user_id, schema_name, str(e))
        raise


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
async def start_schema_monitoring():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å—Ö–µ–º"""
    logger.info("üîÑ –ó–∞–ø—É—Å–∫ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å—Ö–µ–º")
    
    while True:
        try:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç
            schema_monitor.log_daily_schema_report()
            
            # –ñ–¥–µ–º –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–Ω—è
            await asyncio.sleep(24 * 60 * 60)  # 24 —á–∞—Å–∞
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ: {str(e)}")
            await asyncio.sleep(60)  # –ñ–¥–µ–º –º–∏–Ω—É—Ç—É –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–æ–º


if __name__ == "__main__":
    # –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    async def test_schema_monitoring():
        """–¢–µ—Å—Ç–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        logger.info("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å—Ö–µ–º")
        
        # –°–∏–º—É–ª–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø—ã –∫ —Å—Ö–µ–º–∞–º
        schema_monitor.log_schema_access("user1", "public", "users", "read", True)
        schema_monitor.log_schema_access("user1", "demo1", "bills_view", "read", True)
        schema_monitor.log_schema_access("user2", "public", "orders", "read", False)
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats = schema_monitor.get_user_schema_stats("user1")
        logger.info(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è user1: {stats}")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
        schema_monitor.log_daily_schema_report()
    
    asyncio.run(test_schema_monitoring())

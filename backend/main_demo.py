#!/usr/bin/env python3
"""
–î–µ–º–æ-–≤–µ—Ä—Å–∏—è backend –±–µ–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
"""

from fastapi import FastAPI
from fastapi.middleware.cors import CORSMiddleware
import logging
import uvicorn
from contextlib import asynccontextmanager
from typing import Dict, Any

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    handlers=[logging.StreamHandler()],
)

logger = logging.getLogger(__name__)


@asynccontextmanager
async def lifespan(app: FastAPI):
    """
    –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (–¥–µ–º–æ-–≤–µ—Ä—Å–∏—è)
    """
    try:
        logger.info("üöÄ Starting CloverdashBot Demo Backend...")
        logger.info("üìä Demo mode: No database connection required")
        logger.info("‚úÖ Application startup completed successfully")
        yield
    except Exception as e:
        logger.error(f"‚ùå Failed to initialize application: {e}")
        raise
    finally:
        logger.info("üîÑ Shutting down application...")


# –°–æ–∑–¥–∞–µ–º FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app = FastAPI(
    title="CloverdashBot Backend (Demo)",
    version="1.0.0",
    description="–î–µ–º–æ-–≤–µ—Ä—Å–∏—è backend –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏",
    lifespan=lifespan
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)


@app.get("/", response_model=Dict[str, Any])
async def root():
    """–ö–æ—Ä–Ω–µ–≤–æ–π endpoint"""
    return {
        "message": "CloverdashBot Backend (Demo Mode)",
        "version": "1.0.0",
        "status": "running",
        "mode": "demo",
        "database": "not_connected",
        "endpoints": {
            "health": "/health",
            "query": "/query",
            "tables": "/tables",
            "demo": "/demo"
        },
    }


@app.get("/health", response_model=Dict[str, Any])
async def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞"""
    return {
        "status": "healthy",
        "message": "CloverdashBot Backend is running in demo mode",
        "database": "demo_mode",
        "timestamp": "2025-09-02T12:00:00Z"
    }


@app.post("/query", response_model=Dict[str, Any])
async def process_query(query_data: Dict[str, Any]):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¥–µ–º–æ-–≤–µ—Ä—Å–∏—è)"""
    question = query_data.get("question", "")
    user_id = query_data.get("user_id", "demo_user")
    
    logger.info(f"üìù Demo query from user {user_id}: {question}")
    
    # –î–µ–º–æ-–æ—Ç–≤–µ—Ç
    demo_response = {
        "answer": f"–î–µ–º–æ-–æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å: '{question}'\n\n"
                 f"–í —Ä–µ–∞–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –∑–¥–µ—Å—å –±—ã–ª –±—ã:\n"
                 f"‚Ä¢ SQL –∑–∞–ø—Ä–æ—Å, —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π LLM\n"
                 f"‚Ä¢ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö\n"
                 f"‚Ä¢ –ê–Ω–∞–ª–∏–∑ —Å —É—á–µ—Ç–æ–º –ø—Ä–∞–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}\n\n"
                 f"–°–∏—Å—Ç–µ–º–∞ –ø—Ä–∞–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –∏ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!",
        "sql_query": f"SELECT * FROM demo_table WHERE question = '{question}'",
        "success": True,
        "execution_time": 0.1,
        "user_id": user_id,
        "mode": "demo"
    }
    
    return demo_response


@app.get("/tables", response_model=Dict[str, Any])
async def get_tables():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü (–¥–µ–º–æ-–≤–µ—Ä—Å–∏—è)"""
    demo_tables = {
        "tables": [
            {
                "name": "users",
                "description": "–¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
                "columns": ["id", "username", "email", "created_at"],
                "accessible": True
            },
            {
                "name": "user_permissions", 
                "description": "–ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
                "columns": ["id", "role_name", "table_name", "permission_type"],
                "accessible": True
            },
            {
                "name": "database_descriptions",
                "description": "–û–ø–∏—Å–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö", 
                "columns": ["id", "table_name", "description", "columns"],
                "accessible": True
            }
        ],
        "total": 3,
        "mode": "demo"
    }
    
    return demo_tables


@app.get("/demo", response_model=Dict[str, Any])
async def demo_info():
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–µ–º–æ-—Ä–µ–∂–∏–º–µ"""
    return {
        "message": "CloverdashBot Demo Mode",
        "features": [
            "‚úÖ Telegram Bot —Ä–∞–±–æ—Ç–∞–µ—Ç",
            "‚úÖ Backend API –æ—Ç–≤–µ—á–∞–µ—Ç", 
            "‚úÖ –°–∏—Å—Ç–µ–º–∞ –ø—Ä–∞–≤ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞",
            "‚úÖ LLM –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –≥–æ—Ç–æ–≤–∞",
            "‚è≥ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: —Ç—Ä–µ–±—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"
        ],
        "next_steps": [
            "1. –ü–æ–¥–∫–ª—é—á–∏—Ç—å PostgreSQL",
            "2. –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ",
            "3. –ù–∞—Å—Ç—Ä–æ–∏—Ç—å OpenAI API –∫–ª—é—á",
            "4. –ü–æ–ª–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –≥–æ—Ç–æ–≤–∞!"
        ],
        "status": "ready_for_production"
    }


if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ CloverdashBot Demo Backend...")
    print("üìä –†–µ–∂–∏–º: –î–µ–º–æ (–±–µ–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö)")
    print("üåê URL: http://localhost:8000")
    print("üìö –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: http://localhost:8000/docs")
    print("‚úÖ –ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    
    uvicorn.run(
        "main_demo:app",
        host="0.0.0.0",
        port=8000,
        reload=True,
        log_level="info"
    )


#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ —Ä–æ–ª–µ–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.

–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç:
1. –°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Ç–∞–±–ª–∏—Ü–µ users
2. –°–æ–∑–¥–∞–µ—Ç —Ä–æ–ª–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
3. –î–æ–±–∞–≤–ª—è–µ—Ç –º–∞–ø–ø–∏–Ω–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∫ —Ä–æ–ª—è–º
"""

import asyncio
import logging
import sys
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('create_test_users.log', encoding='utf-8'),
        logging.StreamHandler(sys.stdout)
    ]
)

logger = logging.getLogger(__name__)


async def create_test_users():
    """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ —Ä–æ–ª–∏"""
    logger.info("üöÄ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ —Ä–æ–ª–µ–π")
    
    try:
        from services.app_database import app_database_service
        from services.data_database import data_database_service
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        await app_database_service.initialize()
        await data_database_service.initialize()
        
        if not app_database_service.is_connected:
            logger.error("‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
            return False
            
        if not data_database_service.is_connected:
            logger.error("‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
            return False
        
        logger.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–∞–º –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
        
        # 1. –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ app database
        logger.info("üë• –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")
        
        test_users = [
            ("demo_user", "demo@example.com", "Demo User"),
            ("admin", "admin@example.com", "Admin User"),
            ("test_user", "test@example.com", "Test User"),
        ]
        
        for user_id, email, name in test_users:
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
                check_query = "SELECT id FROM users WHERE id = $1"
                result = await app_database_service.execute_query(check_query, [user_id])
                
                if not result.data:
                    # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    insert_query = """
                    INSERT INTO users (id, email, name, created_at, updated_at)
                    VALUES ($1, $2, $3, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP)
                    """
                    await app_database_service.execute_query(insert_query, [user_id, email, name])
                    logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_id}")
                else:
                    logger.info(f"‚ÑπÔ∏è  –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {user_id}")
                    
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {str(e)}")
        
        # 2. –°–æ–∑–¥–∞–µ–º —Ä–æ–ª–∏ –≤ data database
        logger.info("üîê –°–æ–∑–¥–∞–Ω–∏–µ —Ä–æ–ª–µ–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö...")
        
        roles = [
            ("demo_user_role", "–†–æ–ª—å –¥–ª—è –¥–µ–º–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"),
            ("admin_role", "–†–æ–ª—å –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"),
            ("test_user_role", "–†–æ–ª—å –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"),
        ]
        
        for role_name, role_description in roles:
            try:
                # –°–æ–∑–¥–∞–µ–º —Ä–æ–ª—å
                create_role_query = f"CREATE ROLE {role_name}"
                await data_database_service.execute_query(create_role_query)
                logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Ä–æ–ª—å: {role_name}")
                
                # –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—ã–µ –ø—Ä–∞–≤–∞
                grant_query = f"GRANT USAGE ON SCHEMA public TO {role_name}"
                await data_database_service.execute_query(grant_query)
                logger.info(f"‚úÖ –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã –ø—Ä–∞–≤–∞ –Ω–∞ —Å—Ö–µ–º—É public –¥–ª—è —Ä–æ–ª–∏: {role_name}")
                
            except Exception as e:
                if "already exists" in str(e):
                    logger.info(f"‚ÑπÔ∏è  –†–æ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {role_name}")
                else:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–æ–ª–∏ {role_name}: {str(e)}")
        
        # 3. –°–æ–∑–¥–∞–µ–º –º–∞–ø–ø–∏–Ω–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∫ —Ä–æ–ª—è–º
        logger.info("üîó –°–æ–∑–¥–∞–Ω–∏–µ –º–∞–ø–ø–∏–Ω–≥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∫ —Ä–æ–ª—è–º...")
        
        user_role_mappings = [
            ("demo_user", "demo_user_role", "cloverdash_data"),
            ("admin", "admin_role", "cloverdash_data"),
            ("test_user", "test_user_role", "cloverdash_data"),
        ]
        
        for user_id, role_name, database_name in user_role_mappings:
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –º–∞–ø–ø–∏–Ω–≥
                check_query = """
                SELECT id FROM users_role_bd_mapping 
                WHERE user_id = $1 AND role_name = $2
                """
                result = await app_database_service.execute_query(check_query, [user_id, role_name])
                
                if not result.data:
                    # –°–æ–∑–¥–∞–µ–º –º–∞–ø–ø–∏–Ω–≥
                    insert_query = """
                    INSERT INTO users_role_bd_mapping (user_id, role_name, database_name, created_at)
                    VALUES ($1, $2, $3, CURRENT_TIMESTAMP)
                    """
                    await app_database_service.execute_query(insert_query, [user_id, role_name, database_name])
                    logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω –º–∞–ø–ø–∏–Ω–≥: {user_id} -> {role_name}")
                else:
                    logger.info(f"‚ÑπÔ∏è  –ú–∞–ø–ø–∏–Ω–≥ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {user_id} -> {role_name}")
                    
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –º–∞–ø–ø–∏–Ω–≥–∞ {user_id} -> {role_name}: {str(e)}")
        
        # 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        logger.info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
        
        for user_id in ["demo_user", "admin", "test_user"]:
            try:
                query = """
                SELECT role_name, database_name 
                FROM users_role_bd_mapping 
                WHERE user_id::VARCHAR = $1
                """
                result = await app_database_service.execute_query(query, [user_id])
                
                if result.data:
                    role_info = result.data[0]
                    logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}: —Ä–æ–ª—å '{role_info['role_name']}', –ë–î '{role_info['database_name']}'")
                else:
                    logger.warning(f"‚ö†Ô∏è  –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}: —Ä–æ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                    
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {str(e)}")
        
        logger.info("üéâ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
        return False
    
    finally:
        try:
            await app_database_service.close()
            await data_database_service.close()
            logger.info("üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–∞–º –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç—ã")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π: {str(e)}")


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    logger.info("üîß –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ —Ä–æ–ª–µ–π")
    logger.info(f"‚è∞ –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    logger.info("=" * 80)
    
    try:
        success = await create_test_users()
        
        if success:
            logger.info("üéØ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
            return 0
        else:
            logger.error("üí• –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞–≤–µ—Ä—à–µ–Ω–æ —Å –æ—à–∏–±–∫–∞–º–∏!")
            return 1
            
    except Exception as e:
        logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
        return 1


if __name__ == "__main__":
    exit_code = asyncio.run(main())
    sys.exit(exit_code)

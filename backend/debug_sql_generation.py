#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ SQL –∑–∞–ø—Ä–æ—Å–æ–≤ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏.
"""

import asyncio
import logging
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from services.app_database import app_database_service
from services.data_database import data_database_service
from services.llm_service import llm_service

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

async def debug_sql_generation():
    """–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ SQL –∑–∞–ø—Ä–æ—Å–æ–≤"""
    logger.info("üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ SQL –∑–∞–ø—Ä–æ—Å–æ–≤")
    logger.info("=" * 60)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å—ã
    try:
        await app_database_service.initialize()
        await data_database_service.initialize()
        logger.info("‚úÖ –í—Å–µ —Å–µ—Ä–≤–∏—Å—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–µ—Ä–≤–∏—Å–æ–≤: {str(e)}")
        return
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º user_kirill
    user_id = "9c09aad1-d2c8-4a40-b2a0-d8ccbb514a0f"  # user_kirill
    test_query = "Show current time and date"
    
    logger.info(f"üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å: '{test_query}'")
    logger.info(f"üë§ –î–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_id}")
    
    try:
        # 1. –ü–æ–ª—É—á–∞–µ–º —Å—Ö–µ–º—É –ë–î —Å –ø—Ä–∞–≤–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        logger.info("1Ô∏è‚É£ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ö–µ–º—ã –ë–î —Å –ø—Ä–∞–≤–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...")
        schema = await llm_service._get_database_schema_with_user_permissions(user_id)
        logger.info(f"üìä –°—Ö–µ–º–∞ –ë–î –ø–æ–ª—É—á–µ–Ω–∞: {len(schema)} —Ç–∞–±–ª–∏—Ü")
        
        for table_name, table_info in schema.items():
            logger.info(f"   ‚Ä¢ {table_name}: {table_info.get('object_type', 'table')}")
        
        # 2. –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–º–ø—Ç
        logger.info("2Ô∏è‚É£ –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞...")
        prompt = await llm_service._create_sql_prompt_with_user_permissions(test_query, user_id, "en")
        logger.info(f"üìù –ü—Ä–æ–º–ø—Ç —Å–æ–∑–¥–∞–Ω (–¥–ª–∏–Ω–∞: {len(prompt)} —Å–∏–º–≤–æ–ª–æ–≤)")
        
        # 3. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º SQL —á–µ—Ä–µ–∑ LLM
        logger.info("3Ô∏è‚É£ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è SQL —á–µ—Ä–µ–∑ LLM...")
        llm_response = await llm_service.generate_sql_query_with_user_permissions(test_query, user_id, "en")
        
        if llm_response.sql_query:
            logger.info(f"‚úÖ SQL –∑–∞–ø—Ä–æ—Å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω:")
            logger.info(f"üìã SQL: {llm_response.sql_query}")
            
            # 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å SQL
            logger.info("4Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ SQL...")
            try:
                data_database_service._validate_sql_security(llm_response.sql_query)
                logger.info("‚úÖ SQL –∑–∞–ø—Ä–æ—Å –ø—Ä–æ—à–µ–ª –ø—Ä–æ–≤–µ—Ä–∫—É –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏")
                
                # 5. –ü—ã—Ç–∞–µ–º—Å—è –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å
                logger.info("5Ô∏è‚É£ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ SQL –∑–∞–ø—Ä–æ—Å–∞...")
                try:
                    result = await data_database_service.execute_query_with_user(llm_response.sql_query, user_id)
                    logger.info(f"‚úÖ –ó–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ: {result.row_count} —Å—Ç—Ä–æ–∫")
                    if result.data:
                        logger.info("üìä –ü–µ—Ä–≤—ã–µ 3 —Å—Ç—Ä–æ–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞:")
                        for i, row in enumerate(result.data[:3]):
                            logger.info(f"   {i+1}: {row}")
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞: {str(e)}")
                    
            except Exception as e:
                logger.error(f"‚ùå SQL –∑–∞–ø—Ä–æ—Å –ù–ï –ø—Ä–æ—à–µ–ª –ø—Ä–æ–≤–µ—Ä–∫—É –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏: {str(e)}")
                
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
                logger.info("üîç –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞:")
                cleaned_query = data_database_service._clean_sql_query(llm_response.sql_query)
                logger.info(f"üßπ –û—á–∏—â–µ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å: {cleaned_query}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥–æ–µ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω–æ–µ —Å–ª–æ–≤–æ
                dangerous_keywords = [
                    "DROP", "DELETE", "INSERT", "UPDATE", "CREATE", "ALTER", 
                    "TRUNCATE", "GRANT", "REVOKE", "MERGE", "REPLACE", "CALL",
                    "EXEC", "EXECUTE", "DECLARE", "CURSOR", "PROCEDURE", "FUNCTION",
                    "TRIGGER", "VIEW", "INDEX", "DATABASE", "SCHEMA", "TABLE", "COLUMN", "CONSTRAINT"
                ]
                
                import re
                for keyword in dangerous_keywords:
                    pattern = r"\b" + re.escape(keyword) + r"\b"
                    if re.search(pattern, cleaned_query, re.IGNORECASE):
                        logger.warning(f"‚ö†Ô∏è  –ù–∞–π–¥–µ–Ω–æ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω–æ–µ —Å–ª–æ–≤–æ: '{keyword}'")
        else:
            logger.error("‚ùå LLM –Ω–µ —Å–º–æ–≥ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å SQL –∑–∞–ø—Ä–æ—Å")
            logger.info(f"üìù –û–±—ä—è—Å–Ω–µ–Ω–∏–µ: {llm_response.explanation}")
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–µ: {str(e)}")
    
    # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–µ—Ä–≤–∏—Å—ã
    await app_database_service.close()
    await data_database_service.close()
    logger.info("üîö –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

if __name__ == "__main__":
    asyncio.run(debug_sql_generation())

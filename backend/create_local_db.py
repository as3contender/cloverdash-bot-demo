#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
"""

import asyncio
import asyncpg
import sys
import time

async def wait_for_db():
    """–ñ–¥–µ–º –ø–æ–∫–∞ PostgreSQL –∑–∞–ø—É—Å—Ç–∏—Ç—Å—è"""
    url = "postgresql://postgres:password@localhost:5432/cloverdash_bot"
    
    print("‚è≥ –û–∂–∏–¥–∞–µ–º –∑–∞–ø—É—Å–∫ PostgreSQL...")
    
    for attempt in range(30):  # 30 –ø–æ–ø—ã—Ç–æ–∫
        try:
            conn = await asyncpg.connect(url, command_timeout=5)
            await conn.close()
            print("‚úÖ PostgreSQL –≥–æ—Ç–æ–≤!")
            return True
        except Exception as e:
            print(f"–ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}/30: {e}")
            await asyncio.sleep(2)
    
    print("‚ùå PostgreSQL –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è")
    return False

async def create_database():
    """–°–æ–∑–¥–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏ —Ç–∞–±–ª–∏—Ü—ã"""
    
    print("üöÄ –°–æ–∑–¥–∞–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    
    # –ñ–¥–µ–º PostgreSQL
    if not await wait_for_db():
        return False
    
    url = "postgresql://postgres:password@localhost:5432/cloverdash_bot"
    
    try:
        conn = await asyncpg.connect(url)
        
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã
        print("üìã –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü...")
        
        # –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        await conn.execute("""
            CREATE TABLE IF NOT EXISTS users (
                id VARCHAR(255) PRIMARY KEY,
                username VARCHAR(255),
                email VARCHAR(255),
                full_name VARCHAR(255),
                hashed_password VARCHAR(255),
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        """)
        
        # –¢–∞–±–ª–∏—Ü–∞ –æ–ø–∏—Å–∞–Ω–∏–π –ë–î
        await conn.execute("""
            CREATE TABLE IF NOT EXISTS database_descriptions (
                id SERIAL PRIMARY KEY,
                database_name VARCHAR(255) NOT NULL,
                schema_name VARCHAR(255) NOT NULL DEFAULT 'public',
                table_name VARCHAR(255) NOT NULL,
                object_type VARCHAR(50) NOT NULL DEFAULT 'table',
                table_description TEXT,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        """)
        
        # –¢–∞–±–ª–∏—Ü–∞ –º–∞–ø–ø–∏–Ω–≥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∫ —Ä–æ–ª—è–º
        await conn.execute("""
            CREATE TABLE IF NOT EXISTS users_role_bd_mapping (
                id SERIAL PRIMARY KEY,
                user_id VARCHAR(255) NOT NULL,
                role_name VARCHAR(255) NOT NULL,
                database_name VARCHAR(255) NOT NULL,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        """)
        
        # –¢–∞–±–ª–∏—Ü–∞ –ø—Ä–∞–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        await conn.execute("""
            CREATE TABLE IF NOT EXISTS user_permissions (
                id SERIAL PRIMARY KEY,
                role_name VARCHAR(255) NOT NULL,
                database_name VARCHAR(255) NOT NULL,
                schema_name VARCHAR(255) NOT NULL DEFAULT 'public',
                table_name VARCHAR(255) NOT NULL,
                permission_type VARCHAR(50) NOT NULL DEFAULT 'SELECT',
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        """)
        
        print("‚úÖ –¢–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã!")
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        print("üìä –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
        
        # –¢–µ—Å—Ç–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
        await conn.executemany("""
            INSERT INTO users (id, username, email, full_name) 
            VALUES ($1, $2, $3, $4)
            ON CONFLICT (id) DO NOTHING
        """, [
            ("demo_user", "demo", "demo@example.com", "Demo User"),
            ("admin", "admin", "admin@example.com", "Admin User"),
            ("test_user", "test", "test@example.com", "Test User")
        ])
        
        # –†–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        await conn.executemany("""
            INSERT INTO users_role_bd_mapping (user_id, role_name, database_name)
            VALUES ($1, $2, $3)
            ON CONFLICT DO NOTHING
        """, [
            ("demo_user", "user", "cloverdash_bot"),
            ("admin", "admin", "cloverdash_bot"),
            ("test_user", "readonly", "cloverdash_bot")
        ])
        
        # –û–ø–∏—Å–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü
        await conn.executemany("""
            INSERT INTO database_descriptions (database_name, table_name, table_description, object_type)
            VALUES ($1, $2, $3, $4)
            ON CONFLICT DO NOTHING
        """, [
            ("cloverdash_bot", "users", "–¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–∏—Å—Ç–µ–º—ã", "table"),
            ("cloverdash_bot", "user_permissions", "–ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∫ —Ç–∞–±–ª–∏—Ü–∞–º", "table"),
            ("cloverdash_bot", "users_role_bd_mapping", "–ú–∞–ø–ø–∏–Ω–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∫ —Ä–æ–ª—è–º –≤ –ë–î", "table"),
            ("cloverdash_bot", "database_descriptions", "–û–ø–∏—Å–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü –∏ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–π –ë–î", "table"),
            ("cloverdash_bot", "sales", "–¢–∞–±–ª–∏—Ü–∞ –ø—Ä–æ–¥–∞–∂ –∏ –∑–∞–∫–∞–∑–æ–≤", "table"),
            ("cloverdash_bot", "products", "–ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤", "table"),
            ("cloverdash_bot", "customers", "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª–∏–µ–Ω—Ç–∞—Ö", "table")
        ])
        
        # –ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
        await conn.executemany("""
            INSERT INTO user_permissions (role_name, database_name, table_name, permission_type)
            VALUES ($1, $2, $3, $4)
            ON CONFLICT DO NOTHING
        """, [
            # –ê–¥–º–∏–Ω –≤–∏–¥–∏—Ç –≤—Å–µ
            ("admin", "cloverdash_bot", "users", "SELECT"),
            ("admin", "cloverdash_bot", "user_permissions", "SELECT"),
            ("admin", "cloverdash_bot", "users_role_bd_mapping", "SELECT"),
            ("admin", "cloverdash_bot", "database_descriptions", "SELECT"),
            ("admin", "cloverdash_bot", "sales", "SELECT"),
            ("admin", "cloverdash_bot", "products", "SELECT"),
            ("admin", "cloverdash_bot", "customers", "SELECT"),
            
            # –û–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–∏–¥–∏—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã
            ("user", "cloverdash_bot", "sales", "SELECT"),
            ("user", "cloverdash_bot", "products", "SELECT"),
            ("user", "cloverdash_bot", "customers", "SELECT"),
            
            # –¢–æ–ª—å–∫–æ —á—Ç–µ–Ω–∏–µ –¥–ª—è readonly
            ("readonly", "cloverdash_bot", "products", "SELECT")
        ])
        
        print("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã!")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        users_count = await conn.fetchval("SELECT COUNT(*) FROM users")
        tables_count = await conn.fetchval("SELECT COUNT(*) FROM database_descriptions")
        permissions_count = await conn.fetchval("SELECT COUNT(*) FROM user_permissions")
        
        print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        print(f"   - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {users_count}")
        print(f"   - –û–ø–∏—Å–∞–Ω–∏–π —Ç–∞–±–ª–∏—Ü: {tables_count}")
        print(f"   - –ü—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞: {permissions_count}")
        
        await conn.close()
        print("üéâ –õ–æ–∫–∞–ª—å–Ω–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≥–æ—Ç–æ–≤–∞!")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ë–î: {e}")
        return False

if __name__ == "__main__":
    success = asyncio.run(create_database())
    sys.exit(0 if success else 1)

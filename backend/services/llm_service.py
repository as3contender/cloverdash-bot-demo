import openai
from langchain_openai import ChatOpenAI
import time
import re
import logging
from typing import Optional, Dict, Any
import httpx

from config.settings import settings
from services.data_database import data_database_service
from services.app_database import app_database_service
from models.llm import LLMQueryResponse

logger = logging.getLogger(__name__)


class LLMService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å LLM (OpenAI)"""

    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è LLM —Å–µ—Ä–≤–∏—Å–∞"""
        try:
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ HTTP –∫–ª–∏–µ–Ω—Ç–∞ —Å –ø—Ä–æ–∫—Å–∏ –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
            http_client = None
            if settings.openai_proxy:
                logger.info(f"Using proxy: {settings.openai_proxy}")
                http_client = httpx.Client(proxies=settings.openai_proxy)
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑–æ–≤–æ–≥–æ URL –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
            base_url = settings.openai_base_url
            
            self.llm = ChatOpenAI(
                model_name=settings.openai_model,
                temperature=settings.openai_temperature,
                openai_api_key=settings.openai_api_key,
                base_url=base_url,
                http_client=http_client,
            )
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ API –∫–ª—é—á –Ω–∞—Å—Ç—Ä–æ–µ–Ω
            self.is_configured = bool(settings.openai_api_key and settings.openai_api_key.strip())

            logger.info(f"LLM Service initialized with model: {settings.openai_model}")
            logger.info(f"LLM Service configured: {self.is_configured}")
            if base_url:
                logger.info(f"Using custom base URL: {base_url}")
            if settings.openai_proxy:
                logger.info(f"Using proxy: {settings.openai_proxy}")
        except Exception as e:
            logger.error(f"Failed to initialize LLM Service: {e}")
            self.is_configured = False
            self.llm = None

    async def generate_sql_query_with_user_permissions(
        self, 
        natural_query: str, 
        user_id: str, 
        user_language: str = "ru"
    ) -> LLMQueryResponse:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç SQL –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ—Å–Ω–æ–≤–µ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞ —Å —É—á–µ—Ç–æ–º –ø—Ä–∞–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        Args:
            natural_query: –ó–∞–ø—Ä–æ—Å –Ω–∞ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–º —è–∑—ã–∫–µ
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤
            user_language: –Ø–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç–≤–µ—Ç–∞ ('en' –∏–ª–∏ 'ru')
            
        Returns:
            LLMQueryResponse: –û—Ç–≤–µ—Ç —Å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º SQL –∑–∞–ø—Ä–æ—Å–æ–º
        """
        if not self.is_configured or not self.llm:
            raise Exception("LLM Admin –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        
        try:
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–º–ø—Ç —Å —É—á–µ—Ç–æ–º –ø—Ä–∞–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            prompt = await self._create_sql_prompt_with_user_permissions(
                natural_query, user_id, user_language
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ LLM
            response = await self.llm.ainvoke(prompt)
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º SQL –∏–∑ –æ—Ç–≤–µ—Ç–∞
            sql_query = self._extract_sql_from_response(response.content)
            
            # –í–∞–ª–∏–¥–∏—Ä—É–µ–º SQL –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
            if not self._validate_sql_security(sql_query):
                raise Exception("SQL –∑–∞–ø—Ä–æ—Å –Ω–µ –ø—Ä–æ—à–µ–ª –ø—Ä–æ–≤–µ—Ä–∫—É –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏")
            
            result = LLMQueryResponse(
                sql_query=sql_query,
                explanation=self._clean_markdown(response.content),
                execution_time=0.0  # –ë—É–¥–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–æ –ø–æ–∑–∂–µ
            )
            
            logger.info(f"SQL query generated successfully for user {user_id}")
            logger.info(f"Generated SQL query: {sql_query}")
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
            try:
                from services.data_database import data_database_service
                data_database_service._validate_sql_security(sql_query)
                logger.info("‚úÖ Generated SQL passed security validation")
            except Exception as security_error:
                logger.error(f"‚ùå Generated SQL failed security validation: {str(security_error)}")
                logger.info(f"üîç SQL that failed: {sql_query}")
            
            return result
            
        except Exception as e:
            logger.error(f"LLM query generation failed for user {user_id}: {str(e)}")
            raise Exception(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ SQL –∑–∞–ø—Ä–æ—Å–∞: {str(e)}")

    async def _create_sql_prompt_with_user_permissions(
        self, 
        natural_query: str, 
        user_id: str, 
        user_language: str = "en"
    ) -> str:
        """–°–æ–∑–¥–∞–µ—Ç LLM –ø—Ä–æ–º–ø—Ç —Å —É—á–µ—Ç–æ–º –ø—Ä–∞–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ö–µ–º—É –ë–î —Å –ø—Ä–∞–≤–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        schema = await self._get_database_schema_with_user_permissions(user_id)
        schema_description = self._format_schema_for_prompt(schema)
        logger.info(f"User ID: {user_id}, Schema description: {schema_description}")
        prompt = f"""
–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ SQL –∑–∞–ø—Ä–æ—Å–∞–º. –ù–∞ –æ—Å–Ω–æ–≤–µ –æ–ø–∏—Å–∞–Ω–∏—è —Å—Ö–µ–º—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–º —è–∑—ã–∫–µ, —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π SQL –∑–∞–ø—Ä–æ—Å.

{schema_description}

–ó–ê–ü–†–û–° –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø: {natural_query}

–í–ê–ñ–ù–´–ï –ü–†–ê–í–ò–õ–ê:
- –ì–µ–Ω–µ—Ä–∏—Ä—É–π —Ç–æ–ª—å–∫–æ SELECT –∑–∞–ø—Ä–æ—Å—ã
- –ò—Å–ø–æ–ª—å–∑—É–π —Ç–æ–ª—å–∫–æ —Ç–∞–±–ª–∏—Ü—ã, –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}
- –ù–ï —É–∫–∞–∑—ã–≤–∞–π –ø—Ä–µ—Ñ–∏–∫—Å —Å—Ö–µ–º—ã –≤ FROM (–∏—Å–ø–æ–ª—å–∑—É–π –ø—Ä–æ—Å—Ç–æ –∏–º—è —Ç–∞–±–ª–∏—Ü—ã, –Ω–∞–ø—Ä–∏–º–µ—Ä: FROM users)
- –ò–°–ö–õ–Æ–ß–ï–ù–ò–ï: –î–ª—è —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π (CURRENT_DATE, CURRENT_TIME, NOW(), etc.) –ù–ï –∏—Å–ø–æ–ª—å–∑—É–π FROM
- –û—Ç–≤–µ—á–∞–π –Ω–∞ —è–∑—ã–∫–µ: {user_language}
- –û–±—ä—è—Å–Ω–∏ –ª–æ–≥–∏–∫—É –∑–∞–ø—Ä–æ—Å–∞

–°–ü–ï–¶–ò–ê–õ–¨–ù–´–ï –ò–ù–°–¢–†–£–ö–¶–ò–ò –î–õ–Ø –¢–ê–ë–õ–ò–¶–´ users:
- –î–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏—Å–ø–æ–ª—å–∑—É–π: SELECT COUNT(*) FROM users
- –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏—Å–ø–æ–ª—å–∑—É–π: SELECT * FROM users
- –î–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –∏–º–µ–Ω–∏ –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–ª–æ–Ω–∫—É: full_name
- –î–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ Telegram ID –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–ª–æ–Ω–∫—É: telegram_id
- –î–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ —Å—Ç–∞—Ç—É—Å—É –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–ª–æ–Ω–∫—É: is_active

–ü–†–ò–ú–ï–† –ü–†–ê–í–ò–õ–¨–ù–û–ì–û SQL –ó–ê–ü–†–û–°–ê:
```sql
SELECT COUNT(*) AS total_users 
FROM users 
WHERE is_active = true
```

SQL –∑–∞–ø—Ä–æ—Å:
```sql
"""
        
        return prompt

    def _get_language_instruction(self, user_language: str) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –ø–æ —è–∑—ã–∫—É –æ—Ç–≤–µ—Ç–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if user_language == "ru":
            return "–û—Ç–≤–µ—Ç –≤—ã–≤–æ–¥–∏ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ."
        else:
            return "Provide response in English."

    async def _get_user_database_from_mapping(self, user_id: str) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –º–∞–ø–ø–∏–Ω–≥–∞"""
        try:
            query = """
            SELECT database_name 
            FROM users_role_bd_mapping 
            WHERE user_id::VARCHAR = $1
            LIMIT 1
            """
            
            result = await app_database_service.execute_query(query, [user_id])
            
            if result.data:
                database_name = result.data[0]['database_name']
                logger.info(f"User {user_id} mapped to database: {database_name}")
                return database_name
            else:
                logger.warning(f"User {user_id} not found in mapping")
                return None
                
        except Exception as e:
            logger.error(f"Error getting user database from mapping: {str(e)}")
            return None

    async def _get_user_schema_from_mapping(self, user_id: str) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ö–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –º–∞–ø–ø–∏–Ω–≥–∞"""
        try:
            query = """
            SELECT schema_name 
            FROM users_role_bd_mapping 
            WHERE user_id::VARCHAR = $1
            LIMIT 1
            """
            
            result = await app_database_service.execute_query(query, [user_id])
            
            if result.data:
                schema_name = result.data[0]['schema_name']
                logger.info(f"User {user_id} mapped to schema: {schema_name}")
                return schema_name
            else:
                logger.warning(f"User {user_id} not found in mapping")
                return None
                
        except Exception as e:
            logger.error(f"Error getting user schema from mapping: {str(e)}")
            return None

    async def _get_database_schema_with_user_permissions(self, user_id: str) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ö–µ–º—É –ë–î —Å —É—á–µ—Ç–æ–º –ø—Ä–∞–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –º–∞–ø–ø–∏–Ω–≥–∞
            database_name = await self._get_user_database_from_mapping(user_id)
            
            if not database_name:
                logger.warning(f"User {user_id} not found in mapping, using default database")
                database_name = data_database_service.get_database_name()
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ö–µ–º—É —Å –ø—Ä–∞–≤–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            # –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º —Å—Ö–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –º–∞–ø–ø–∏–Ω–≥–∞
            schema_name = await self._get_user_schema_from_mapping(user_id)
            if not schema_name:
                schema_name = "public"  # Fallback –∫ public
                
            schema = await app_database_service.get_database_schema_with_user_permissions(
                user_id=user_id,
                database_name=database_name,
                include_views=True,
                schema_name=schema_name
            )
            
            logger.info(f"Database schema retrieved for user {user_id}: {len(schema)} tables")
            return schema
            
        except Exception as e:
            logger.error(f"Failed to get database schema for user {user_id}: {e}")
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤—É—é —Å—Ö–µ–º—É –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
            return {
                "users": {
                    "description": "–¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–±–∞–∑–æ–≤–∞—è)",
                    "columns": [
                        {"name": "id", "description": "ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", "datatype": "uuid"},
                        {"name": "username", "description": "–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", "datatype": "varchar"}
                    ]
                }
            }

    def _format_schema_for_prompt(self, db_schema: Dict[str, Any]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å—Ö–µ–º—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–æ–º–ø—Ç–∞"""
        if not db_schema:
            return "–°—Ö–µ–º–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞."

        schema_text = "–î–û–°–¢–£–ü–ù–´–ï –û–ë–™–ï–ö–¢–´ –ë–ê–ó–´ –î–ê–ù–ù–´–•:\n\n"

        for table_name, table_info in db_schema.items():
            object_type = table_info.get("object_type", "table")
            schema_name = table_info.get("schema_name", "public")

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–∏–ø –æ–±—ä–µ–∫—Ç–∞ (—Ç–∞–±–ª–∏—Ü–∞ –∏–ª–∏ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ)
            object_label = "–ü–†–ï–î–°–¢–ê–í–õ–ï–ù–ò–ï" if object_type == "view" else "–¢–ê–ë–õ–ò–¶–ê"
            full_name = f"{schema_name}.{table_name}" if schema_name != "public" else table_name

            schema_text += f"{object_label}: {full_name}\n"
            if "description" in table_info:
                schema_text += f"–û–ü–ò–°–ê–ù–ò–ï: {table_info['description']}\n"

            # –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è bills —Ç–∞–±–ª–∏—Ü—ã
            if table_name == "bills":
                schema_text += "–í–ê–ñ–ù–û: –≠—Ç–æ –æ—Å–Ω–æ–≤–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–¥–∞–∂!\n"
                schema_text += "–ö–õ–Æ–ß–ï–í–´–ï –ö–û–õ–û–ù–ö–ò –î–õ–Ø –ê–ù–ê–õ–ò–ó–ê:\n"
                schema_text += "  - bill_key: –∫–ª—é—á —á–µ–∫–∞\n"
                schema_text += "  - bill_date: –¥–∞—Ç–∞ —á–µ–∫–∞\n"
                schema_text += "  - bill_time: –≤—Ä–µ–º—è —á–µ–∫–∞\n"
                schema_text += "  - bill_code: –∫–æ–¥ —á–µ–∫–∞\n"
                schema_text += "  - customer_id: –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–∫—É–ø–∞—Ç–µ–ª—è\n"
                schema_text += "  - goods_type: —Ç–∏–ø —Ç–æ–≤–∞—Ä–∞\n"
                schema_text += "  - goods_group: –≥—Ä—É–ø–ø–∞ —Ç–æ–≤–∞—Ä–∞\n"
                schema_text += "  - goods_name: –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞\n"
                schema_text += "  - goods_full_name: –ø–æ–ª–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞\n"
                schema_text += "  - row_quantity: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞\n"
                schema_text += "  - row_amount: —Ü–µ–Ω–∞ —Ç–æ–≤–∞—Ä–∞\n"
                schema_text += "  - row_sum: —Å—É–º–º–∞ —Ç–æ–≤–∞—Ä–∞\n"
                schema_text += "  - row_sale: —Å–∫–∏–¥–∫–∞ –Ω–∞ —Ç–æ–≤–∞—Ä\n"
                schema_text += "  - customer_name: –∏–º—è –∫–ª–∏–µ–Ω—Ç–∞\n"

            schema_text += "–í–°–ï –ö–û–õ–û–ù–ö–ò:\n"
            for column in table_info.get("columns", []):
                col_name = column.get("name", "")
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º datatype –∏–∑ –æ–ø–∏—Å–∞–Ω–∏–π, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω, –∏–Ω–∞—á–µ –±–∞–∑–æ–≤—ã–π type
                col_type = column.get("datatype", column.get("type", ""))
                col_desc = column.get("description", "")
                nullable = " (–º–æ–∂–µ—Ç –±—ã—Ç—å NULL)" if column.get("nullable") else ""

                schema_text += f"  - {col_name} ({col_type}){nullable}"
                if col_desc:
                    schema_text += f" - {col_desc}"
                schema_text += "\n"
            schema_text += "\n"

        return schema_text

    def _extract_sql_from_response(self, response: str) -> str:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç SQL –∑–∞–ø—Ä–æ—Å –∏–∑ –æ—Ç–≤–µ—Ç–∞ LLM"""
        logger.info(f"üîç LLM Response: {response}")  # –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç
        
        # –ò—â–µ–º SQL –±–ª–æ–∫ –≤ markdown
        sql_pattern = r"```sql\s*(.*?)\s*```"
        match = re.search(sql_pattern, response, re.DOTALL | re.IGNORECASE)

        if match:
            sql_query = match.group(1).strip()
            logger.info(f"üìã Extracted SQL from markdown: {sql_query}")
            return sql_query

        # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω markdown –±–ª–æ–∫, –∏—â–µ–º –º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω—ã–π SQL –∑–∞–ø—Ä–æ—Å
        lines = response.split("\n")
        sql_lines = []
        in_sql = False
        
        for line in lines:
            line = line.strip()
            if line.upper().startswith("SELECT"):
                in_sql = True
                sql_lines.append(line)
            elif in_sql and (line.upper().startswith(("FROM", "WHERE", "GROUP BY", "HAVING", "ORDER BY", "LIMIT")) or 
                           line.startswith(("FROM", "WHERE", "GROUP BY", "HAVING", "ORDER BY", "LIMIT")) or
                           line.endswith(";")):
                sql_lines.append(line)
                if line.endswith(";"):
                    break
            elif in_sql and line == "":
                sql_lines.append(line)
            elif in_sql and not line.upper().startswith(("SELECT", "FROM", "WHERE", "GROUP BY", "HAVING", "ORDER BY", "LIMIT")):
                # –ï—Å–ª–∏ –≤—Å—Ç—Ä–µ—Ç–∏–ª–∏ –Ω–µ-SQL —Å—Ç—Ä–æ–∫—É, –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ–º
                break

        if sql_lines:
            extracted_sql = "\n".join(sql_lines).strip()
            logger.info(f"üìã Extracted SQL from plain text: {extracted_sql}")
            return extracted_sql

        raise Exception("SQL –∑–∞–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ—Ç–≤–µ—Ç–µ LLM")

    def _validate_sql_security(self, sql_query: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç SQL –∑–∞–ø—Ä–æ—Å –Ω–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å"""
        sql_upper = sql_query.upper().strip()

        # –†–∞–∑—Ä–µ—à–∞–µ–º —Ç–æ–ª—å–∫–æ SELECT –∑–∞–ø—Ä–æ—Å—ã
        if not sql_upper.startswith("SELECT"):
            return False

        # –ó–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –∏ —Ñ—É–Ω–∫—Ü–∏–∏ (–∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Å–ª–æ–≤–∞)
        forbidden_keywords = [
            "DROP",
            "DELETE",
            "UPDATE",
            "INSERT",
            "ALTER",
            "TRUNCATE",
            "CREATE",
            "GRANT",
            "REVOKE",
            "EXEC",
            "EXECUTE",
            "PROCEDURE",
            "FUNCTION",
            "TRIGGER",
            # "INFORMATION_SCHEMA",  # –†–∞–∑—Ä–µ—à–∞–µ–º –∑–∞–ø—Ä–æ—Å—ã –∫ information_schema –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
        ]

        # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã (–∫–∞–∫ –ø–æ–¥—Å—Ç—Ä–æ–∫–∏)
        forbidden_symbols = ["--", "/*", "*/"]

        # –ó–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ –ø—Ä–µ—Ñ–∏–∫—Å—ã
        forbidden_prefixes = ["SP_", "PG_", "POSTGRES", "ADMIN"]

        # –†–∞–∑–±–∏–≤–∞–µ–º SQL –Ω–∞ —Å–ª–æ–≤–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        words = re.findall(r"\b\w+\b", sql_upper)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Å–ª–æ–≤–∞
        for word in words:
            if word in forbidden_keywords:
                return False

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–µ—Ñ–∏–∫—Å—ã
            for prefix in forbidden_prefixes:
                if word.startswith(prefix):
                    return False

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –∫–∞–∫ –ø–æ–¥—Å—Ç—Ä–æ–∫–∏
        for symbol in forbidden_symbols:
            if symbol in sql_upper:
                return False

        return True

    def _clean_markdown(self, text: str) -> str:
        """–û—á–∏—â–∞–µ—Ç markdown —Ä–∞–∑–º–µ—Ç–∫—É –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
        # –£–¥–∞–ª—è–µ–º SQL –±–ª–æ–∫–∏
        text = re.sub(r"```sql.*?```", "", text, flags=re.DOTALL | re.IGNORECASE)

        # –£–¥–∞–ª—è–µ–º –¥—Ä—É–≥–∏–µ –±–ª–æ–∫–∏ –∫–æ–¥–∞
        text = re.sub(r"```.*?```", "", text, flags=re.DOTALL)

        # –£–¥–∞–ª—è–µ–º markdown —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        text = re.sub(r"\*\*(.*?)\*\*", r"\1", text)  # **bold**
        text = re.sub(r"\*(.*?)\*", r"\1", text)  # *italic*
        text = re.sub(r"`(.*?)`", r"\1", text)  # `code`

        # –û—á–∏—â–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏ –ø–µ—Ä–µ–Ω–æ—Å—ã
        text = re.sub(r"\n\s*\n", "\n\n", text)
        text = text.strip()

        return text

    async def test_connection(self) -> bool:
        """
        –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ LLM —Å–µ—Ä–≤–∏—Å—É

        Returns:
            bool: True –µ—Å–ª–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ, False –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ
        """
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–µ—Ä–≤–∏—Å –Ω–∞—Å—Ç—Ä–æ–µ–Ω
            if not self.is_configured or not self.llm:
                logger.warning("LLM service not configured")
                return False

            test_prompt = "–ù–∞–ø–∏—à–∏ –ø—Ä–æ—Å—Ç–æ–π SQL –∑–∞–ø—Ä–æ—Å –¥–ª—è –≤—ã–±–æ—Ä–∞ –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π –∏–∑ —Ç–∞–±–ª–∏—Ü—ã test"
            response = self.llm.invoke(test_prompt)
            return bool(response and response.content)

        except Exception as e:
            logger.error(f"LLM connection test failed: {str(e)}")
            return False

    def get_service_info(self) -> Dict[str, Any]:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ LLM —Å–µ—Ä–≤–∏—Å–µ

        Returns:
            Dict: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ä–≤–∏—Å–µ
        """
        return {
            "service": "LLM Service",
            "model": settings.openai_model,
            "temperature": settings.openai_temperature,
            "configured": self.is_configured,
            "status": "active" if self.is_configured else "not configured",
        }


# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
llm_service = LLMService()

import asyncpg
import logging
from typing import Dict, Any, List
from datetime import datetime
import json

from config.settings import settings, DB_SCHEMA_CONTEXT
from models.database import DatabaseQueryResult

logger = logging.getLogger(__name__)


class DataDatabaseService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö (—Ç–æ–ª—å–∫–æ —á—Ç–µ–Ω–∏–µ)"""

    def __init__(self):
        self.pool = None
        self.is_connected = False
        self._database_name = None

    async def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö"""
        try:
            database_url = settings.get_data_database_url()

            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏–∑ URL –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –æ–ø–∏—Å–∞–Ω–∏—è—Ö
            if database_url:
                self._database_name = database_url.split("/")[-1]

            self.pool = await asyncpg.create_pool(database_url, min_size=1, max_size=10, command_timeout=60)

            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
            async with self.pool.acquire() as connection:
                await connection.fetchval("SELECT 1")

            self.is_connected = True
            logger.info("Data database connection established")

        except Exception as e:
            logger.error(f"Failed to connect to data database: {str(e)}")
            self.is_connected = False
            raise

    async def close(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
        if self.pool:
            await self.pool.close()
            self.is_connected = False
            logger.info("Data database connection closed")

    async def test_connection(self) -> bool:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
        try:
            if not self.pool:
                return False

            async with self.pool.acquire() as connection:
                await connection.fetchval("SELECT 1")
            return True
        except Exception as e:
            logger.error(f"Data database connection test failed: {str(e)}")
            return False

    async def execute_query(self, query: str) -> DatabaseQueryResult:
        """
        –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ SQL –∑–∞–ø—Ä–æ—Å–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
        –¢–æ–ª—å–∫–æ SELECT –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏
        """
        if not self.is_connected or not self.pool:
            raise Exception("Data database is not connected")

        # –°—Ç—Ä–æ–≥–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ SQL –∑–∞–ø—Ä–æ—Å–∞
        self._validate_sql_security(query)

        start_time = datetime.now()

        try:
            async with self.pool.acquire() as connection:
                result = await connection.fetch(query)

                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π
                data = []
                columns = []

                if result:
                    columns = list(result[0].keys())
                    for row in result:
                        data.append(dict(row))

                execution_time = (datetime.now() - start_time).total_seconds()

                logger.info(f"Data query executed successfully: {len(data)} rows in {execution_time:.2f}s")

                return DatabaseQueryResult(
                    data=data, columns=columns, row_count=len(data), execution_time=execution_time
                )

        except Exception as e:
            execution_time = (datetime.now() - start_time).total_seconds()
            logger.error(f"Data database query failed: {str(e)}")
            raise Exception(f"Query execution failed: {str(e)}")

    async def execute_query_with_user(self, query: str, user_id: str) -> DatabaseQueryResult:
        """
        –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ SQL –∑–∞–ø—Ä–æ—Å–∞ –æ—Ç –∏–º–µ–Ω–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –µ–≥–æ —Ä–æ–ª–∏
        
        Args:
            query: SQL –∑–∞–ø—Ä–æ—Å –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –æ—Ç –∏–º–µ–Ω–∏ –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∑–∞–ø—Ä–æ—Å
            
        Returns:
            DatabaseQueryResult: –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞
        """
        if not self.is_connected or not self.pool:
            raise Exception("Data database is not connected")

        # –°—Ç—Ä–æ–≥–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ SQL –∑–∞–ø—Ä–æ—Å–∞
        self._validate_sql_security(query)

        start_time = datetime.now()

        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
            user_role = await self._get_user_role(user_id)
            
            if not user_role:
                raise Exception(f"User {user_id} not found or has no assigned role")

            logger.info(f"Executing query for user {user_id} with role {user_role}")

            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç –∏–º–µ–Ω–∏ —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            async with self.pool.acquire() as connection:
                # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
                current_user = await connection.fetchval("SELECT current_user")
                current_db = await connection.fetchval("SELECT current_database()")
                logger.info(f"üîç Before SET ROLE - current_user: {current_user}, database: {current_db}")
                
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–æ–ª—å –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏
                await connection.execute(f"SET ROLE {user_role}")
                
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º search_path –¥–ª—è —Ä–æ–ª–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ö–µ–º—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                user_schema = await self._get_user_schema(user_id)
                if user_schema and user_schema != "public":
                    await connection.execute(f"SET search_path TO {user_schema}, public")
                    logger.info(f"üîç Set search_path to {user_schema}, public for {user_role}")
                else:
                    # –î–ª—è —Ä–æ–ª–µ–π –±–µ–∑ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–π —Å—Ö–µ–º—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ public
                    await connection.execute("SET search_path TO public")
                    logger.info(f"üîç Set search_path to public for {user_role}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–æ–ª—å –ø–æ—Å–ª–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏
                current_user_after = await connection.fetchval("SELECT current_user")
                search_path_after = await connection.fetchval("SHOW search_path")
                logger.info(f"üîç After SET ROLE - current_user: {current_user_after}, search_path: {search_path_after}")
                
                # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å
                logger.info(f"üîç Executing query: {query}")
                
                # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
                result = await connection.fetch(query)

                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π
                data = []
                columns = []

                if result:
                    columns = list(result[0].keys())
                    for row in result:
                        data.append(dict(row))

                execution_time = (datetime.now() - start_time).total_seconds()

                logger.info(f"Data query executed successfully for user {user_id}: {len(data)} rows in {execution_time:.2f}s")

                return DatabaseQueryResult(
                    data=data, columns=columns, row_count=len(data), execution_time=execution_time
                )

        except Exception as e:
            execution_time = (datetime.now() - start_time).total_seconds()
            logger.error(f"Data database query failed for user {user_id}: {str(e)}")
            raise Exception(f"Query execution failed: {str(e)}")

    async def _get_user_role(self, user_id: str) -> str:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            str: –†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ None –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
        """
        try:
            from services.app_database import app_database_service
            
            if not app_database_service.is_connected:
                raise Exception("Application database is not connected")

            # –ü–æ–ª—É—á–∞–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ç–∞–±–ª–∏—Ü—ã users_role_bd_mapping
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º CAST –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è user_id –≤ VARCHAR, —Ç–∞–∫ –∫–∞–∫ –≤ —Ç–∞–±–ª–∏—Ü–µ –º–æ–∂–µ—Ç –±—ã—Ç—å UUID
            query = """
            SELECT role_name 
            FROM users_role_bd_mapping 
            WHERE user_id::VARCHAR = $1
            LIMIT 1
            """
            
            result = await app_database_service.execute_query(query, [user_id])
            
            if result.data:
                role_name = result.data[0]['role_name']
                logger.info(f"Found role '{role_name}' for user {user_id}")
                return role_name
            else:
                logger.warning(f"No role found for user {user_id}")
                return None
                
        except Exception as e:
            logger.error(f"Failed to get role for user {user_id}: {str(e)}")
            raise Exception(f"Failed to get user role: {str(e)}")

    async def _get_user_schema(self, user_id: str) -> str:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Å—Ö–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            str: –°—Ö–µ–º–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ None –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
        """
        try:
            from services.app_database import app_database_service
            
            if not app_database_service.is_connected:
                raise Exception("Application database is not connected")

            # –ü–æ–ª—É—á–∞–µ–º —Å—Ö–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ç–∞–±–ª–∏—Ü—ã users_role_bd_mapping
            query = """
            SELECT schema_name 
            FROM users_role_bd_mapping 
            WHERE user_id::VARCHAR = $1
            LIMIT 1
            """
            
            result = await app_database_service.execute_query(query, [user_id])
            
            if result.data:
                schema_name = result.data[0]['schema_name']
                logger.info(f"Found schema '{schema_name}' for user {user_id}")
                return schema_name
            else:
                logger.warning(f"No schema found for user {user_id}")
                return None
                
        except Exception as e:
            logger.error(f"Failed to get schema for user {user_id}: {str(e)}")
            raise Exception(f"Failed to get user schema: {str(e)}")

    def _validate_sql_security(self, query: str) -> None:
        """–°—Ç—Ä–æ–≥–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è SQL –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å"""
        if not query or not query.strip():
            raise Exception("Empty query not allowed")

        # –£–¥–∞–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∏ –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º
        cleaned_query = self._clean_sql_query(query)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ SELECT –∑–∞–ø—Ä–æ—Å
        if not cleaned_query.upper().strip().startswith("SELECT"):
            raise Exception("Only SELECT queries are allowed")

        # –°–ø–∏—Å–æ–∫ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ (DDL/DML –∫–æ–º–∞–Ω–¥—ã)
        dangerous_keywords = [
            "DROP",
            "DELETE",
            "INSERT",
            "UPDATE",
            "CREATE",
            "ALTER",
            "TRUNCATE",
            "GRANT",
            "REVOKE",
            "MERGE",
            "REPLACE",
            "CALL",
            "EXEC",
            "EXECUTE",
            "DECLARE",
            "CURSOR",
            "PROCEDURE",
            "FUNCTION",
            "TRIGGER",
            "VIEW",
            "INDEX",
            "DATABASE",
            "SCHEMA",
            "TABLE",
            "COLUMN",
            "CONSTRAINT",
        ]

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ–ø–∞—Å–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
        for keyword in dangerous_keywords:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º word boundaries –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞
            import re

            pattern = r"\b" + re.escape(keyword) + r"\b"
            if re.search(pattern, cleaned_query, re.IGNORECASE):
                logger.info(f"üîç Found dangerous keyword: '{keyword}' in query: {cleaned_query}")
                # –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: —Ä–∞–∑—Ä–µ—à–∞–µ–º TABLE –≤ information_schema.tables –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
                if keyword == "TABLE" and "information_schema.tables" in cleaned_query:
                    logger.info(f"‚úÖ Allowing TABLE keyword in information_schema.tables context")
                    continue
                logger.error(f"‚ùå Blocking dangerous keyword: '{keyword}'")
                raise Exception(f"Dangerous keyword '{keyword}' not allowed in queries")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
        dangerous_functions = [
            "pg_sleep",
            "pg_terminate_backend",
            "pg_cancel_backend",
            "pg_reload_conf",
            "pg_rotate_logfile",
            "pg_read_file",
            "pg_write_file",
            "copy",
            "\\copy",
            "lo_import",
            "lo_export",
        ]

        for func in dangerous_functions:
            if func.lower() in cleaned_query.lower():
                raise Exception(f"Dangerous function '{func}' not allowed")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É –∑–∞–ø—Ä–æ—Å–∞
        if len(query) > 5000:
            raise Exception("Query too long (max 5000 characters)")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã (;)
        # –†–∞–∑—Ä–µ—à–∞–µ–º —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω SELECT –∑–∞–ø—Ä–æ—Å
        statements = [s.strip() for s in cleaned_query.split(";") if s.strip()]
        if len(statements) > 1:
            raise Exception("Multiple statements not allowed")

        logger.info("SQL query passed security validation")

    def _clean_sql_query(self, query: str) -> str:
        """–û—á–∏—Å—Ç–∫–∞ SQL –∑–∞–ø—Ä–æ—Å–∞ –æ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤"""
        import re

        # –£–¥–∞–ª—è–µ–º –æ–¥–Ω–æ—Å—Ç—Ä–æ—á–Ω—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ --
        query = re.sub(r"--.*$", "", query, flags=re.MULTILINE)

        # –£–¥–∞–ª—è–µ–º –º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ /* */
        query = re.sub(r"/\*.*?\*/", "", query, flags=re.DOTALL)

        # –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏ –ø–µ—Ä–µ–≤–æ–¥—ã —Å—Ç—Ä–æ–∫
        query = " ".join(query.split())

        return query

    async def get_table_sample(self, table_name: str, limit: int = 5) -> DatabaseQueryResult:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–∏–º–µ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ç–∞–±–ª–∏—Ü—ã"""
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–µ–Ω–∏ —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ - —Ä–∞–∑—Ä–µ—à–∞–µ–º schema.table —Ñ–æ—Ä–º–∞—Ç
            import re

            # –†–∞–∑—Ä–µ—à–∞–µ–º —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã, –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è, –¥–µ—Ñ–∏—Å—ã –∏ —Ç–æ—á–∫–∏ (–¥–ª—è —Å—Ö–µ–º)
            if not re.match(r"^[a-zA-Z0-9_.-]+$", table_name):
                raise Exception("Invalid table name format")

            # –ó–∞—â–∏—Ç–∞ –æ—Ç SQL injection - –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–µ—Ç –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
            if any(
                char in table_name for char in [";", "--", "/*", "*/", "union", "drop", "delete", "insert", "update"]
            ):
                raise Exception("Invalid table name - contains restricted characters")

            query = f"SELECT * FROM {table_name} LIMIT {limit}"
            return await self.execute_query(query)

        except Exception as e:
            logger.error(f"Failed to get table sample for {table_name}: {str(e)}")
            raise

    def get_schema_context(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —Å—Ö–µ–º—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        return DB_SCHEMA_CONTEXT or {}

    def get_database_name(self) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏ —Ç–µ–∫—É—â–µ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        return self._database_name or "unknown"


# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
data_database_service = DataDatabaseService()

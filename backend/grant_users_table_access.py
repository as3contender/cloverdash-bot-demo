#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ç–∞–±–ª–∏—Ü–µ users –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
"""

import asyncio
import logging
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from services.app_database import app_database_service

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

async def grant_users_table_access(role_name: str, database_name: str, schema_name: str = "public"):
    """–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –¥–æ—Å—Ç—É–ø –∫ —Ç–∞–±–ª–∏—Ü–µ users –¥–ª—è —Ä–æ–ª–∏"""
    logger.info(f"üîê –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ç–∞–±–ª–∏—Ü–µ users –¥–ª—è —Ä–æ–ª–∏ {role_name}")
    
    try:
        # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–µ –ø—Ä–∞–≤–æ
        check_query = """
        SELECT id, permission_type, created_at
        FROM user_permissions 
        WHERE role_name = $1 
        AND database_name = $2 
        AND schema_name = $3
        AND table_name = 'users'
        """
        
        check_result = await app_database_service.execute_query(check_query, [role_name, database_name, schema_name])
        
        if check_result.data:
            logger.info(f"‚úÖ –ü—Ä–∞–≤–æ –¥–æ—Å—Ç—É–ø–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç:")
            for perm in check_result.data:
                logger.info(f"   Permission: {perm['permission_type']}")
                logger.info(f"   Created: {perm['created_at']}")
            return True
        
        # 2. –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∞–≤–æ –¥–æ—Å—Ç—É–ø–∞
        insert_query = """
        INSERT INTO user_permissions (role_name, database_name, schema_name, table_name, permission_type, created_at)
        VALUES ($1, $2, $3, $4, $5, CURRENT_TIMESTAMP)
        """
        
        await app_database_service.execute_query(insert_query, [role_name, database_name, schema_name, 'users', 'SELECT'])
        
        logger.info(f"‚úÖ –ü—Ä–∞–≤–æ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ç–∞–±–ª–∏—Ü–µ users –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ —Ä–æ–ª–∏ {role_name}")
        logger.info(f"   Database: {database_name}")
        logger.info(f"   Schema: {schema_name}")
        logger.info(f"   Permission: SELECT")
        
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–∏ –¥–æ—Å—Ç—É–ø–∞: {str(e)}")
        return False

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    logger.info("üöÄ –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ç–∞–±–ª–∏—Ü–µ users")
    logger.info("=" * 50)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    try:
        await app_database_service.initialize()
        logger.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
        return
    
    # –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º –¥–æ—Å—Ç—É–ø –¥–ª—è user_kirill
    success = await grant_users_table_access(
        role_name="user_kirill",
        database_name="test1", 
        schema_name="demo1"
    )
    
    if success:
        logger.info("‚úÖ –î–æ—Å—Ç—É–ø –∫ —Ç–∞–±–ª–∏—Ü–µ users —É—Å–ø–µ—à–Ω–æ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω!")
    else:
        logger.info("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ —Ç–∞–±–ª–∏—Ü–µ users")
    
    # –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    await app_database_service.close()
    logger.info("üîö –û–ø–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

if __name__ == "__main__":
    asyncio.run(main())

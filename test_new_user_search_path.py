#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã search_path –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
–î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç, –∫–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ search_path
"""

import asyncio
import logging
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ backend
sys.path.append(os.path.join(os.path.dirname(__file__), 'backend'))

from services.data_database import data_database_service
from services.app_database import app_database_service

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

async def test_new_user_search_path():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ search_path –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    
    logger.info("üß™ –¢–ï–°–¢: –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ search_path –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
    logger.info("=" * 70)
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å—ã
        logger.info("1Ô∏è‚É£ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤...")
        await app_database_service.initialize()
        await data_database_service.initialize()
        
        if not app_database_service.is_connected:
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")
            return False
            
        if not data_database_service.is_connected:
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
            return False
        
        logger.info("‚úÖ –°–µ—Ä–≤–∏—Å—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        test_users = [
            {
                "user_id": "4ed3d75a-482d-4993-a3bb-eba666b5dea2",  # user_denis
                "expected_schema": "demo1",
                "description": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å Denis (–¥–æ–ª–∂–µ–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å demo1, public)"
            },
            {
                "user_id": "9c09aad1-d2c8-4a40-b2a0-d8ccbb514a0f",  # user_kirill  
                "expected_schema": "demo1",
                "description": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å Kirill (–¥–æ–ª–∂–µ–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å demo1, public)"
            },
            {
                "user_id": "69ccad66-ea6d-40d3-9986-10c5d92c0259",  # user_roma1
                "expected_schema": "public",
                "description": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å Roma1 (–¥–æ–ª–∂–µ–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å public)"
            }
        ]
        
        for i, test_user in enumerate(test_users, 1):
            logger.info(f"\n{i}Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {test_user['description']}")
            logger.info(f"   User ID: {test_user['user_id']}")
            logger.info(f"   –û–∂–∏–¥–∞–µ–º–∞—è —Å—Ö–µ–º–∞: {test_user['expected_schema']}")
            
            try:
                # –ü–æ–ª—É—á–∞–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                role = await data_database_service._get_user_role(test_user['user_id'])
                if not role:
                    logger.warning(f"   ‚ö†Ô∏è –†–æ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {test_user['user_id']}")
                    continue
                    
                logger.info(f"   –†–æ–ª—å: {role}")
                
                # –ü–æ–ª—É—á–∞–µ–º —Å—Ö–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                schema = await data_database_service._get_user_schema(test_user['user_id'])
                logger.info(f"   –°—Ö–µ–º–∞: {schema}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –æ–∂–∏–¥–∞–µ–º–æ–π —Å—Ö–µ–º–µ
                if schema == test_user['expected_schema']:
                    logger.info(f"   ‚úÖ –°—Ö–µ–º–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–∂–∏–¥–∞–µ–º–æ–π: {schema}")
                else:
                    logger.warning(f"   ‚ö†Ô∏è –°—Ö–µ–º–∞ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–∂–∏–¥–∞–µ–º–æ–π: {schema} != {test_user['expected_schema']}")
                
                # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞
                logger.info("   üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞...")
                
                # –ü—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ search_path
                test_query = "SELECT current_schema() as current_schema, current_user as current_user"
                
                try:
                    result = await data_database_service.execute_query_with_user(test_query, test_user['user_id'])
                    
                    if result.data:
                        current_schema = result.data[0]['current_schema']
                        current_user = result.data[0]['current_user']
                        
                        logger.info(f"   üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø—Ä–æ—Å–∞:")
                        logger.info(f"      Current schema: {current_schema}")
                        logger.info(f"      Current user: {current_user}")
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ current_schema —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–∂–∏–¥–∞–µ–º–æ–π
                        if test_user['expected_schema'] == "public":
                            if current_schema == "public":
                                logger.info(f"   ‚úÖ Search_path —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ: {current_schema}")
                            else:
                                logger.warning(f"   ‚ö†Ô∏è Search_path –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π: {current_schema} (–æ–∂–∏–¥–∞–ª—Å—è public)")
                        else:
                            if current_schema == test_user['expected_schema']:
                                logger.info(f"   ‚úÖ Search_path —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ: {current_schema}")
                            else:
                                logger.warning(f"   ‚ö†Ô∏è Search_path –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π: {current_schema} (–æ–∂–∏–¥–∞–ª—Å—è {test_user['expected_schema']})")
                    else:
                        logger.warning("   ‚ö†Ô∏è –ó–∞–ø—Ä–æ—Å –Ω–µ –≤–µ—Ä–Ω—É–ª –¥–∞–Ω–Ω—ã—Ö")
                        
                except Exception as query_error:
                    logger.error(f"   ‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞: {str(query_error)}")
                
            except Exception as user_error:
                logger.error(f"   ‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {str(user_error)}")
        
        logger.info("\n" + "=" * 70)
        logger.info("üéâ –¢–ï–°–¢ –ó–ê–í–ï–†–®–ï–ù!")
        logger.info("‚úÖ –ù–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ search_path —Ä–∞–±–æ—Ç–∞–µ—Ç –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        logger.info("üí° –¢–µ–ø–µ—Ä—å search_path –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç—Å—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ö–µ–º—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞: {str(e)}")
        return False

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ search_path")
    
    success = await test_new_user_search_path()
    
    if success:
        logger.info("‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")
        sys.exit(0)
    else:
        logger.error("‚ùå –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —Å –æ—à–∏–±–∫–∞–º–∏")
        sys.exit(1)

if __name__ == "__main__":
    asyncio.run(main())

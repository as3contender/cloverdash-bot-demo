#!/usr/bin/env python3
"""
–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã —Å —Ä–æ–ª—å—é user_denis
"""

import asyncio
import logging
import asyncpg
import os

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö test1
DATABASE_URL = os.getenv("DATABASE_URL", "postgresql://user:password@localhost:5432/test1")

async def diagnose_user_denis():
    """–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º—ã —Å —Ä–æ–ª—å—é user_denis"""
    logger.info("üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º—ã —Å —Ä–æ–ª—å—é user_denis")
    logger.info("=" * 60)
    
    connection = None
    
    try:
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö test1
        logger.info("üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö test1...")
        connection = await asyncpg.connect(DATABASE_URL)
        logger.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        
        # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ä–æ–ª–∏ user_denis
        logger.info("\n1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ä–æ–ª–∏ user_denis...")
        role_check = await connection.fetchrow("""
            SELECT rolname, rolconfig, rolcanlogin, rolsuper 
            FROM pg_roles 
            WHERE rolname = 'user_denis'
        """)
        
        if role_check:
            logger.info("‚úÖ –†–æ–ª—å user_denis —Å—É—â–µ—Å—Ç–≤—É–µ—Ç:")
            logger.info(f"   - –ò–º—è: {role_check['rolname']}")
            logger.info(f"   - –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: {role_check['rolconfig']}")
            logger.info(f"   - –ú–æ–∂–µ—Ç –ª–æ–≥–∏–Ω–∏—Ç—å—Å—è: {role_check['rolcanlogin']}")
            logger.info(f"   - –°—É–ø–µ—Ä–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {role_check['rolsuper']}")
        else:
            logger.error("‚ùå –†–æ–ª—å user_denis –ù–ï —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
            return False
        
        # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ —Å—Ö–µ–º—É demo1
        logger.info("\n2Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –Ω–∞ —Å—Ö–µ–º—É demo1...")
        schema_privileges = await connection.fetch("""
            SELECT privilege_type 
            FROM information_schema.usage_privileges 
            WHERE grantee = 'user_denis' AND object_name = 'demo1'
        """)
        
        if schema_privileges:
            logger.info("‚úÖ –ü—Ä–∞–≤–∞ –Ω–∞ —Å—Ö–µ–º—É demo1:")
            for priv in schema_privileges:
                logger.info(f"   - {priv['privilege_type']}")
        else:
            logger.warning("‚ö†Ô∏è –ù–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —Å—Ö–µ–º—É demo1")
        
        # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ bills_view
        logger.info("\n3Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –Ω–∞ bills_view...")
        table_privileges = await connection.fetch("""
            SELECT privilege_type 
            FROM information_schema.table_privileges 
            WHERE grantee = 'user_denis' AND schemaname = 'demo1' AND tablename = 'bills_view'
        """)
        
        if table_privileges:
            logger.info("‚úÖ –ü—Ä–∞–≤–∞ –Ω–∞ bills_view:")
            for priv in table_privileges:
                logger.info(f"   - {priv['privilege_type']}")
        else:
            logger.warning("‚ö†Ô∏è –ù–µ—Ç –ø—Ä–∞–≤ –Ω–∞ bills_view")
        
        # 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º search_path
        logger.info("\n4Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ search_path...")
        search_path = await connection.fetchval("""
            SELECT rolconfig 
            FROM pg_roles 
            WHERE rolname = 'user_denis' AND rolconfig IS NOT NULL
        """)
        
        if search_path:
            logger.info(f"‚úÖ Search_path –Ω–∞—Å—Ç—Ä–æ–µ–Ω: {search_path}")
        else:
            logger.warning("‚ö†Ô∏è Search_path –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        
        # 5. –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø –∫ bills_view
        logger.info("\n5Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ—Å—Ç—É–ø–∞ –∫ bills_view...")
        try:
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–æ–ª—å user_denis
            await connection.execute("SET ROLE user_denis")
            logger.info("‚úÖ –†–æ–ª—å user_denis —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            current_user = await connection.fetchval("SELECT current_user")
            logger.info(f"   –¢–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {current_user}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º search_path
            current_search_path = await connection.fetchval("SHOW search_path")
            logger.info(f"   –¢–µ–∫—É—â–∏–π search_path: {current_search_path}")
            
            # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ bills_view
            count = await connection.fetchval("SELECT COUNT(*) FROM bills_view")
            logger.info(f"‚úÖ –î–æ—Å—Ç—É–ø –∫ bills_view —Ä–∞–±–æ—Ç–∞–µ—Ç! –ó–∞–ø–∏—Å–µ–π: {count}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ bills_view: {e}")
            return False
        
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏: {e}")
        return False
    finally:
        if connection:
            await connection.close()

async def fix_user_denis_role():
    """–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–æ–ª–∏ user_denis"""
    logger.info("\nüîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–æ–ª–∏ user_denis")
    logger.info("=" * 60)
    
    connection = None
    
    try:
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö test1
        logger.info("üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö test1...")
        connection = await asyncpg.connect(DATABASE_URL)
        logger.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        
        # –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–æ–ª–∏
        fix_commands = [
            # 1. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º search_path –¥–ª—è —Ä–æ–ª–∏ user_denis
            "ALTER ROLE user_denis SET search_path TO demo1, public",
            
            # 2. –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ —Å—Ö–µ–º—É demo1
            "GRANT USAGE ON SCHEMA demo1 TO user_denis",
            
            # 3. –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã –≤ —Å—Ö–µ–º–µ demo1
            "GRANT SELECT ON ALL TABLES IN SCHEMA demo1 TO user_denis",
            
            # 4. –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ –±—É–¥—É—â–∏–µ –æ–±—ä–µ–∫—Ç—ã
            "ALTER DEFAULT PRIVILEGES IN SCHEMA demo1 GRANT SELECT ON TABLES TO user_denis"
        ]
        
        for i, command in enumerate(fix_commands, 1):
            try:
                logger.info(f"{i}Ô∏è‚É£ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ: {command}")
                await connection.execute(command)
                logger.info("   ‚úÖ –£—Å–ø–µ—à–Ω–æ")
            except Exception as e:
                logger.error(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        logger.info("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞...")
        role_config = await connection.fetchval("""
            SELECT rolconfig 
            FROM pg_roles 
            WHERE rolname = 'user_denis'
        """)
        
        if role_config:
            logger.info(f"‚úÖ Search_path —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {role_config}")
        else:
            logger.warning("‚ö†Ô∏è Search_path –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è: {e}")
        return False
    finally:
        if connection:
            await connection.close()

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–æ–ª–∏ user_denis")
    
    # –°–Ω–∞—á–∞–ª–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—Ä—É–µ–º
    diagnosis_ok = await diagnose_user_denis()
    
    if not diagnosis_ok:
        logger.info("\nüîß –ó–∞–ø—É—Å–∫ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è...")
        fix_ok = await fix_user_denis_role()
        
        if fix_ok:
            logger.info("\nüîç –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è...")
            await diagnose_user_denis()
        else:
            logger.error("‚ùå –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å")
    else:
        logger.info("‚úÖ –†–æ–ª—å user_denis —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
    
    logger.info("\nüéâ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")

if __name__ == "__main__":
    asyncio.run(main())


import logging
from dotenv import load_dotenv
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, filters

# –ù–æ–≤—ã–µ –∏–º–ø–æ—Ä—Ç—ã
from config import Config, BotConfig
from models import UserData
from services import UserService, DatabaseService, KeyboardService, ValidationService, MessageService
from exceptions import ConfigurationError, BotException

# –û—Å—Ç–∞–ª—å–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã
from api_client import APIClient
from handlers import CommandHandlers
from query_handler import QueryHandler
from error_handler import ErrorHandler

# Load environment variables
load_dotenv()

# Logging configuration
logging.basicConfig(format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO)
logger = logging.getLogger(__name__)


class CloverdashBot:
    def __init__(self, config: BotConfig):
        self.config = config

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º API –∫–ª–∏–µ–Ω—Ç
        self.api_client = APIClient(config.backend_url)

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å—ã
        self.user_service = UserService(self.api_client)
        self.database_service = DatabaseService(self.api_client)

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ö–µ–Ω–¥–ª–µ—Ä—ã —Å —Å–µ—Ä–≤–∏—Å–∞–º–∏
        self.query_handler = QueryHandler(self.api_client)
        self.command_handlers = CommandHandlers(
            self.api_client, self.query_handler, self.user_service, self.database_service
        )
        self.error_handler = ErrorHandler(self.api_client)

    def setup_handlers(self, application: Application) -> None:
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤ –¥–ª—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        # –ö–æ–º–∞–Ω–¥—ã
        application.add_handler(CommandHandler("start", self.command_handlers.start_command))
        application.add_handler(CommandHandler("help", self.command_handlers.help_command))
        application.add_handler(CommandHandler("tables", self.command_handlers.tables_command))
        application.add_handler(CommandHandler("sample", self.command_handlers.sample_command))
        application.add_handler(CommandHandler("settings", self.command_handlers.settings_command))

        # –ë—ã—Å—Ç—Ä—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —Å–º–µ–Ω—ã —è–∑—ã–∫–∞
        application.add_handler(CommandHandler("en", self.command_handlers.quick_lang_en_command))
        application.add_handler(CommandHandler("ru", self.command_handlers.quick_lang_ru_command))

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ callback'–æ–≤ –æ—Ç inline –∫–Ω–æ–ø–æ–∫
        application.add_handler(CallbackQueryHandler(self.command_handlers.handle_example_callback))

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–∑–∞–ø—Ä–æ—Å—ã)
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.query_handler.handle_query))

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
        application.add_error_handler(self.error_handler.handle_error)


def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        config = Config.load_from_env()

        print(f"üöÄ Starting CloverdashBot...")
        print(f"üîó Backend URL: {config.backend_url}")
        print(f"üìä Config: retries={config.max_retries}, timeout={config.request_timeout}s")

        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        application = Application.builder().token(config.telegram_token).build()

        # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
        bot = CloverdashBot(config)

        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ö–µ–Ω–¥–ª–µ—Ä—ã
        bot.setup_handlers(application)

        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        logger.info("Starting CloverdashBot with new architecture...")
        application.run_polling(allowed_updates=Update.ALL_TYPES)

    except ConfigurationError as e:
        logger.error(f"Configuration error: {e}")
        print(f"‚ùå Configuration error: {e}")
        print("üìù Check your .env file and environment variables")
    except Exception as e:
        logger.error(f"Failed to start bot: {e}")
        print(f"‚ùå Failed to start bot: {e}")


if __name__ == "__main__":
    main()

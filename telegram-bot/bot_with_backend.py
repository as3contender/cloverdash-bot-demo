#!/usr/bin/env python3
"""
Telegram –±–æ—Ç —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π backend API
"""

import os
import asyncio
import logging
import aiohttp
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞
TELEGRAM_TOKEN = "7380855161:AAGSyOP8hT-0lk4b2emmN7CGTP34sd7M97w"
BACKEND_URL = "http://localhost:8000"

async def start_command(update: Update, context) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user = update.effective_user
    await update.message.reply_text(
        f'–ü—Ä–∏–≤–µ—Ç, {user.first_name}! üëã\n\n'
        '–Ø CloverdashBot - –±–æ—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —è–∑—ã–∫.\n\n'
        'üöÄ **Backend –ø–æ–¥–∫–ª—é—á–µ–Ω!**\n'
        '‚úÖ –°–∏—Å—Ç–µ–º–∞ –ø—Ä–∞–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∞–∫—Ç–∏–≤–Ω–∞\n'
        '‚úÖ LLM –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –≥–æ—Ç–æ–≤–∞\n\n'
        '–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n'
        '/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É\n'
        '/help - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É\n'
        '/tables - –ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã\n'
        '/demo - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ\n\n'
        '–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ –≤–æ–ø—Ä–æ—Å –Ω–∞ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–º —è–∑—ã–∫–µ!'
    )

async def help_command(update: Update, context) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    await update.message.reply_text(
        'üìö –°–ø—Ä–∞–≤–∫–∞ –ø–æ CloverdashBot:\n\n'
        '–Ø –º–æ–≥—É –ø–æ–º–æ—á—å –≤–∞–º:\n'
        '‚Ä¢ –û—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –æ –¥–∞–Ω–Ω—ã—Ö\n'
        '‚Ä¢ –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å SQL –∑–∞–ø—Ä–æ—Å—ã\n'
        '‚Ä¢ –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã\n'
        '‚Ä¢ –†–∞–±–æ—Ç–∞—Ç—å —Å –ø—Ä–∞–≤–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n\n'
        '–ü—Ä–∏–º–µ—Ä—ã –≤–æ–ø—Ä–æ—Å–æ–≤:\n'
        '"–°–∫–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Å–∏—Å—Ç–µ–º–µ?"\n'
        '"–ü–æ–∫–∞–∂–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–∫–∞–∑—ã"\n'
        '"–ö–∞–∫–∏–µ —Ç–∞–±–ª–∏—Ü—ã –¥–æ—Å—Ç—É–ø–Ω—ã?"\n\n'
        '–ö–æ–º–∞–Ω–¥—ã:\n'
        '/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É\n'
        '/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n'
        '/tables - –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã\n'
        '/demo - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ'
    )

async def tables_command(update: Update, context) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /tables"""
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(f"{BACKEND_URL}/tables") as response:
                if response.status == 200:
                    data = await response.json()
                    tables = data.get("tables", [])
                    
                    message = "üìã **–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã:**\n\n"
                    for table in tables:
                        message += f"üîπ **{table['name']}**\n"
                        message += f"   –û–ø–∏—Å–∞–Ω–∏–µ: {table['description']}\n"
                        message += f"   –ö–æ–ª–æ–Ω–∫–∏: {', '.join(table['columns'])}\n"
                        message += f"   –î–æ—Å—Ç—É–ø: {'‚úÖ' if table['accessible'] else '‚ùå'}\n\n"
                    
                    message += f"–í—Å–µ–≥–æ —Ç–∞–±–ª–∏—Ü: {data.get('total', 0)}"
                    await update.message.reply_text(message)
                else:
                    await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ç–∞–±–ª–∏—Ü")
    except Exception as e:
        logger.error(f"Error in tables_command: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ backend")

async def demo_command(update: Update, context) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /demo"""
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(f"{BACKEND_URL}/demo") as response:
                if response.status == 200:
                    data = await response.json()
                    
                    message = f"üöÄ **{data['message']}**\n\n"
                    message += "**–§—É–Ω–∫—Ü–∏–∏:**\n"
                    for feature in data.get("features", []):
                        message += f"{feature}\n"
                    
                    message += "\n**–°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:**\n"
                    for step in data.get("next_steps", []):
                        message += f"{step}\n"
                    
                    message += f"\n**–°—Ç–∞—Ç—É—Å:** {data.get('status', 'unknown')}"
                    await update.message.reply_text(message)
                else:
                    await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–∏—Å—Ç–µ–º–µ")
    except Exception as e:
        logger.error(f"Error in demo_command: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ backend")

async def handle_message(update: Update, context) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    user_message = update.message.text
    user = update.effective_user
    
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user.first_name}: {user_message}")
    
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ backend
        async with aiohttp.ClientSession() as session:
            payload = {
                "question": user_message,
                "user_id": str(user.id)
            }
            
            async with session.post(f"{BACKEND_URL}/query", json=payload) as response:
                if response.status == 200:
                    data = await response.json()
                    
                    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
                    answer = data.get("answer", "–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞")
                    sql_query = data.get("sql_query", "")
                    success = data.get("success", False)
                    
                    response_message = f"ü§ñ **–û—Ç–≤–µ—Ç:**\n{answer}\n\n"
                    
                    if sql_query:
                        response_message += f"üìä **SQL –∑–∞–ø—Ä–æ—Å:**\n```sql\n{sql_query}\n```\n\n"
                    
                    if success:
                        response_message += "‚úÖ –ó–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ"
                    else:
                        response_message += "‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞"
                    
                    await update.message.reply_text(response_message, parse_mode='Markdown')
                else:
                    await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –≤ backend")
    except Exception as e:
        logger.error(f"Error in handle_message: {e}")
        await update.message.reply_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ backend\n\n"
            "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ backend –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:8000"
        )

async def error_handler(update: Update, context) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {context.error}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("ü§ñ –ó–∞–ø—É—Å–∫ CloverdashBot —Å Backend –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π...")
    print(f"üì° –¢–æ–∫–µ–Ω: {TELEGRAM_TOKEN[:10]}...")
    print(f"üîó Backend URL: {BACKEND_URL}")
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(TELEGRAM_TOKEN).build()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start_command))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("tables", tables_command))
    application.add_handler(CommandHandler("demo", demo_command))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
    application.add_error_handler(error_handler)
    
    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
    print("üîó Backend –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:8000")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == '__main__':
    main()

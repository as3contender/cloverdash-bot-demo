#!/usr/bin/env python3
"""
–¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞ –±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–≥–æ Telegram —Ç–æ–∫–µ–Ω–∞
"""
import asyncio
import aiohttp
import json
from dotenv import load_dotenv
import os

load_dotenv()

BACKEND_URL = os.getenv("BACKEND_URL", "http://localhost:8000")


async def test_backend_integration():
    """–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å backend API"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å backend...")

    test_queries = ["–ü–æ–∫–∞–∂–∏ —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è", "–ö–∞–∫–∞—è –≤–µ—Ä—Å–∏—è PostgreSQL –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è?", "–ü–æ–∫–∞–∂–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"]

    for query in test_queries:
        print(f"\nüì§ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å: '{query}'")

        try:
            async with aiohttp.ClientSession() as session:
                payload = {"query": query, "user_id": "test_user"}

                async with session.post(f"{BACKEND_URL}/query", json=payload) as response:
                    if response.status == 200:
                        result = await response.json()
                        print(f"‚úÖ –°—Ç–∞—Ç—É—Å: {response.status}")
                        print(f"üìã –û—Ç–≤–µ—Ç –æ—Ç API:")
                        print(json.dumps(result, indent=2, ensure_ascii=False))

                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞
                        if result.get("success"):
                            print("‚úÖ –ó–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ")
                            if result.get("data"):
                                print(f"üìä –ü–æ–ª—É—á–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {len(result['data'])}")
                            if result.get("sql_query"):
                                print(f"üîç SQL: {result['sql_query']}")
                        else:
                            print(f"‚ùå –û—à–∏–±–∫–∞: {result.get('message')}")
                    else:
                        print(f"‚ùå HTTP –æ—à–∏–±–∫–∞: {response.status}")
                        error_text = await response.text()
                        print(f"üìã –û—à–∏–±–∫–∞: {error_text}")

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞: {str(e)}")

        print("-" * 60)


def test_bot_token():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è Telegram —Ç–æ–∫–µ–Ω–∞"""
    print("üîë –ü—Ä–æ–≤–µ—Ä—è–µ–º Telegram —Ç–æ–∫–µ–Ω...")

    telegram_token = os.getenv("TELEGRAM_TOKEN")

    if not telegram_token or telegram_token == "your_bot_token_here":
        print("‚ùå TELEGRAM_TOKEN –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!")
        print("üìù –î–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ –Ω—É–∂–Ω–æ:")
        print("   1. –°–æ–∑–¥–∞—Ç—å –±–æ—Ç–∞ —á–µ—Ä–µ–∑ @BotFather –≤ Telegram")
        print("   2. –°–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª .env —Å —Ç–æ–∫–µ–Ω–æ–º:")
        print("   TELEGRAM_TOKEN=your_actual_token")
        print("   BACKEND_URL=http://localhost:8000")
        return False
    else:
        print(f"‚úÖ TELEGRAM_TOKEN –Ω–∞–π–¥–µ–Ω: {telegram_token[:10]}...")
        return True


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("ü§ñ CloverdashBot - –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ")
    print("=" * 60)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º backend
    print(f"üîó Backend URL: {BACKEND_URL}")
    await test_backend_integration()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω
    token_ok = test_bot_token()

    print("\n" + "=" * 60)
    print("üìã –ò–¢–û–ì–ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
    print("‚úÖ Backend –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è: OK")
    print(f"{'‚úÖ' if token_ok else '‚ùå'} Telegram —Ç–æ–∫–µ–Ω: {'OK' if token_ok else '–ù–ï –ù–ê–°–¢–†–û–ï–ù'}")

    if token_ok:
        print("\nüöÄ –ì–æ—Ç–æ–≤–æ –∫ –∑–∞–ø—É—Å–∫—É! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: python bot.py")
    else:
        print("\nüìù –°–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ Telegram —Ç–æ–∫–µ–Ω (—Å–º. setup_instructions.txt)")


if __name__ == "__main__":
    asyncio.run(main())

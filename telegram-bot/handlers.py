import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from typing import Dict, Any

# –ù–æ–≤—ã–µ –∏–º–ø–æ—Ä—Ç—ã
from models import UserData, UserSettings, Language
from services import UserService, DatabaseService, KeyboardService, MessageService
from exceptions import AuthenticationError, ValidationError, BotException
from config import CallbackData, Emoji

# –°—Ç–∞—Ä—ã–µ –∏–º–ø–æ—Ä—Ç—ã (–ø–æ–∫–∞ –æ—Å—Ç–∞–≤–ª—è–µ–º –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
from api_client import APIClient
from formatters import MessageFormatter
from translations import get_translation

logger = logging.getLogger(__name__)


class CommandHandlers:
    """–•–µ–Ω–¥–ª–µ—Ä—ã –∫–æ–º–∞–Ω–¥ Telegram –±–æ—Ç–∞"""

    def __init__(self, api_client: APIClient, query_handler=None, user_service=None, database_service=None):
        self.api_client = api_client
        self.query_handler = query_handler

        # –ù–æ–≤—ã–µ —Å–µ—Ä–≤–∏—Å—ã
        self.user_service = user_service or UserService(api_client)
        self.database_service = database_service or DatabaseService(api_client)
        self.keyboard_service = KeyboardService()
        self.message_service = MessageService()

    def _get_user_data(self, update: Update) -> UserData:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ update"""
        user = update.effective_user
        return UserData.from_telegram_user(user)

    def _get_user_data_dict(self, update: Update) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–∞–∫ —Å–ª–æ–≤–∞—Ä—å (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)"""
        user = update.effective_user
        return {
            "user_id": str(user.id),
            "username": user.username,
            "first_name": user.first_name,
            "last_name": user.last_name,
        }

    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start —Å –Ω–æ–≤–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π"""
        user_data = self._get_user_data(update)

        try:
            # –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —á–µ—Ä–µ–∑ UserService
            token, settings = await self.user_service.authenticate_and_get_settings(user_data)

            # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            welcome_message = self.message_service.get_welcome_message(
                settings.preferred_language, user_data.first_name
            )

            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏ —á–µ—Ä–µ–∑ KeyboardService
            keyboard = self.keyboard_service.create_examples_keyboard(settings.preferred_language)

            await update.message.reply_text(welcome_message, reply_markup=keyboard)

        except AuthenticationError as e:
            logger.error(f"Authentication error in start_command: {e}")
            await update.message.reply_text(f"{Emoji.ERROR} Authentication failed. Please try again.")
        except Exception as e:
            logger.error(f"Error in start_command: {e}")
            await update.message.reply_text(f"{Emoji.ERROR} Error starting bot. Please try again.")

    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
        user_data = self._get_user_data(update)
        user_id = user_data["user_id"]

        try:
            token = await self.api_client.authenticate_user(user_id, user_data)
            settings = await self.api_client.get_user_settings(user_id, token)
            lang = settings.get("preferred_language", "en")
            help_message = (
                get_translation(lang, "help") + "\n\n‚ö†Ô∏è Important: I only work with SELECT queries for data security."
            )
            await update.message.reply_text(help_message)
        except Exception as e:
            logger.error(f"Error in help_command: {e}")
            await update.message.reply_text("‚ùå Error getting help. Please try again.")

    async def tables_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /tables –¥–ª—è –ø–æ–∫–∞–∑–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü"""
        user_data = self._get_user_data(update)
        user_id = user_data["user_id"]

        logger.info(f"Tables list requested by user {user_id}")

        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –æ–±—Ä–∞–±–æ—Ç–∫–µ
            processing_msg = await update.message.reply_text("üîç Getting list of available tables...")

            # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
            token = await self.api_client.authenticate_user(user_id, user_data)

            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–∞–±–ª–∏—Ü
            result = await self.api_client.get_tables(token)

            if result.get("success") and result.get("tables"):
                tables = result["tables"]
                database_name = result.get("database_name", "unknown")

                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
                reply_message = MessageFormatter.format_tables_list(tables, database_name)

            else:
                reply_message = "üìä No tables found in the database"

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            try:
                await update.message.reply_text(reply_message, parse_mode="Markdown")
            except Exception as markdown_error:
                logger.error(f"Markdown parsing error in tables: {markdown_error}")
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç –µ—Å–ª–∏ markdown –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
                clean_message = MessageFormatter.clean_markdown(reply_message)
                await update.message.reply_text(clean_message)

        except Exception as e:
            logger.error(f"Error in tables_command: {e}")
            await update.message.reply_text("‚ùå An error occurred getting tables list. Please try again.")

    async def sample_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /sample –¥–ª—è –ø–æ–∫–∞–∑–∞ –æ–±—Ä–∞–∑—Ü–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ç–∞–±–ª–∏—Ü—ã"""
        user_data = self._get_user_data(update)
        user_id = user_data["user_id"]

        # –ü–æ–ª—É—á–∞–µ–º –∏–º—è —Ç–∞–±–ª–∏—Ü—ã –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥—ã
        if not context.args:
            await update.message.reply_text(
                "‚ùå Please specify a table name!\n\n" "Usage: /sample <table_name>\n" "Example: /sample bills_view"
            )
            return

        table_name = " ".join(context.args)  # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–º–µ–Ω–∞ —Ç–∞–±–ª–∏—Ü —Å –ø—Ä–æ–±–µ–ª–∞–º–∏/—Ç–æ—á–∫–∞–º–∏

        logger.info(f"Sample command requested by user {user_id} for table: {table_name}")

        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –æ–±—Ä–∞–±–æ—Ç–∫–µ
            processing_msg = await update.message.reply_text(f"üîç Getting sample data from `{table_name}`...")

            # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
            token = await self.api_client.authenticate_user(user_id, user_data)

            # –ü–æ–ª—É—á–∞–µ–º –æ–±—Ä–∞–∑–µ—Ü –¥–∞–Ω–Ω—ã—Ö
            result = await self.api_client.get_table_sample(table_name, token)

            if result.get("success") and result.get("data"):
                data = result["data"]
                reply_message = MessageFormatter.format_sample_data(data, table_name)

            elif result.get("success") and not result.get("data"):
                reply_message = f"üìä Table `{table_name}` is empty (no records found)"

            else:
                error_msg = result.get("message", "Unknown error")
                safe_error = MessageFormatter.escape_markdown(error_msg)
                reply_message = f"‚ùå *Error:*\n{safe_error}"

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            try:
                await update.message.reply_text(reply_message, parse_mode="Markdown")
            except Exception as markdown_error:
                logger.error(f"Markdown parsing error in sample: {markdown_error}")
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç –µ—Å–ª–∏ markdown –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
                clean_message = MessageFormatter.clean_markdown(reply_message)
                await update.message.reply_text(clean_message)

        except Exception as e:
            logger.error(f"Error in sample_command: {e}")
            await update.message.reply_text("‚ùå An error occurred getting sample data. Please try again.")

    async def settings_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /settings –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        user_data = self._get_user_data(update)

        try:
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_settings = await self.user_service.authenticate_and_get_settings(user_data)

            if not context.args:
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
                msg = get_translation(user_settings.preferred_language, "current_settings").format(
                    lang=user_settings.preferred_language,
                    explanation=user_settings.show_explanation,
                    sql=user_settings.show_sql,
                )
                await update.message.reply_text(msg)
                return

            if len(context.args) >= 2:
                option = context.args[0].lower()
                value = context.args[1].lower()

                # –í–∞–ª–∏–¥–∞—Ü–∏—è –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —á–µ—Ä–µ–∑ UserService
                try:
                    updated_settings = await self.user_service.update_settings(user_data, option, value)

                    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
                    if option == "lang":
                        flag = Emoji.FLAG_US if value == "en" else Emoji.FLAG_RU
                        lang_name = "English" if value == "en" else "–†—É—Å—Å–∫–∏–π"
                        success_msg = get_translation(updated_settings.preferred_language, "settings_saved")
                        success_msg += f"\n{Emoji.GLOBE} Language: {lang_name} {flag}"
                        await update.message.reply_text(success_msg)
                    else:
                        await update.message.reply_text(
                            get_translation(updated_settings.preferred_language, "settings_saved")
                        )

                except ValueError as e:
                    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
                    error_msg = get_translation(user_settings.preferred_language, str(e))
                    await update.message.reply_text(error_msg)

            else:
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º help —Å–æ–æ–±—â–µ–Ω–∏–µ
                await update.message.reply_text(get_translation(user_settings.preferred_language, "settings_usage"))

        except AuthenticationError as e:
            logger.error(f"Authentication error in settings_command: {e}")
            await update.message.reply_text(f"{Emoji.CROSS} Authentication failed. Please try /start")
        except Exception as e:
            logger.error(f"Error in settings_command: {e}")
            await update.message.reply_text(f"{Emoji.CROSS} Error updating settings. Please try again.")

    async def quick_lang_en_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–ë—ã—Å—Ç—Ä–æ–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫"""
        user_data = self._get_user_data(update)

        try:
            await self.user_service.update_language(user_data, Language.ENGLISH)
            await update.message.reply_text(
                f"Settings updated {Emoji.CHECK}\n{Emoji.GLOBE} Language: English {Emoji.FLAG_US}"
            )
        except AuthenticationError as e:
            logger.error(f"Authentication error in quick_lang_en_command: {e}")
            await update.message.reply_text(f"{Emoji.CROSS} Authentication failed. Please try /start")
        except Exception as e:
            logger.error(f"Error in quick_lang_en_command: {e}")
            await update.message.reply_text(f"{Emoji.CROSS} Error changing language. Please try again.")

    async def quick_lang_ru_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–ë—ã—Å—Ç—Ä–æ–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫"""
        user_data = self._get_user_data(update)

        try:
            await self.user_service.update_language(user_data, Language.RUSSIAN)
            await update.message.reply_text(
                f"–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã {Emoji.CHECK}\n{Emoji.GLOBE} –Ø–∑—ã–∫: –†—É—Å—Å–∫–∏–π {Emoji.FLAG_RU}"
            )
        except AuthenticationError as e:
            logger.error(f"Authentication error in quick_lang_ru_command: {e}")
            await update.message.reply_text(f"{Emoji.CROSS} Authentication failed. Please try /start")
        except Exception as e:
            logger.error(f"Error in quick_lang_ru_command: {e}")
            await update.message.reply_text(f"{Emoji.CROSS} –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ —è–∑—ã–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

    async def handle_example_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback'–æ–≤ –æ—Ç –∫–Ω–æ–ø–æ–∫ —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏"""
        logger.info(f"=== CALLBACK RECEIVED ===")
        query = update.callback_query
        logger.info(f"Callback data: {query.data}")
        logger.info(f"User: {query.from_user.id}")

        await query.answer()  # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ callback

        if query.data.startswith("ex:"):
            # –ú–∞–ø–ø–∏–Ω–≥ –∫–æ—Ä–æ—Ç–∫–∏—Ö –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤ –Ω–∞ –ø–æ–ª–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
            examples = {
                "time_ru": "–ü–æ–∫–∞–∂–∏ —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è",
                "sales_ru": "–ö–∞–∫–æ–≤ –æ–±—ä–µ–º –ø—Ä–æ–¥–∞–∂ –≤ —è–Ω–≤–∞—Ä–µ?",
                "bestseller_ru": "–ö–∞–∫–æ–π —Ç–æ–≤–∞—Ä –ø—Ä–æ–¥–∞–µ—Ç—Å—è –ª—É—á—à–µ –≤—Å–µ–≥–æ?",
                "time_en": "Show current time",
                "sales_en": "What is the sales volume in January?",
                "bestseller_en": "What is the best-selling product?",
            }

            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∏–∑ callback_data
            example_id = query.data[3:]  # –£–±–∏—Ä–∞–µ–º "ex:" –ø—Ä–µ—Ñ–∏–∫—Å
            example_query = examples.get(example_id, "Unknown example")

            logger.info(f"Example button clicked by user {query.from_user.id}: {example_id} -> {example_query}")

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —á—Ç–æ –≤—ã–±—Ä–∞–Ω –ø—Ä–∏–º–µ—Ä
            await query.message.reply_text(f"üéØ –í—ã –≤—ã–±—Ä–∞–ª–∏: {example_query}\n\nüí° –°–µ–π—á–∞—Å –≤—ã–ø–æ–ª–Ω—é —ç—Ç–æ—Ç –∑–∞–ø—Ä–æ—Å...")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ query_handler –¥–æ—Å—Ç—É–ø–µ–Ω
            if self.query_handler is None:
                logger.error("QueryHandler –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω")
                await query.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                return

                # –í–º–µ—Å—Ç–æ —Å–æ–∑–¥–∞–Ω–∏—è fake Update, –≤—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ API
            # –î–ª—è callback query –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ query.from_user
            user_data = {
                "user_id": str(query.from_user.id),
                "username": query.from_user.username,
                "first_name": query.from_user.first_name,
                "last_name": query.from_user.last_name,
            }
            user_id = user_data["user_id"]

            try:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –∑–∞–ø—Ä–æ—Å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è
                processing_msg = await query.message.reply_text("üîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∞—à –∑–∞–ø—Ä–æ—Å...")

                # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
                token = await self.api_client.authenticate_user(user_id, user_data)

                # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                settings = await self.api_client.get_user_settings(user_id, token)

                # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ API
                result = await self.api_client.execute_query(example_query, user_id, token)

                if result.get("success"):
                    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –¥–ª—è —É—Å–ø–µ—à–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
                    from formatters import MessageFormatter

                    reply_message = MessageFormatter.format_query_result(result, settings)
                else:
                    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—à–∏–±–∫—É API
                    error_message = result.get("message", "Unknown error")
                    from formatters import MessageFormatter

                    safe_error = MessageFormatter.escape_markdown(error_message)
                    reply_message = f"‚ùå *–û—à–∏–±–∫–∞:*\n{safe_error}"

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                try:
                    await query.message.reply_text(reply_message, parse_mode="Markdown")
                except Exception as markdown_error:
                    logger.error(f"Markdown parsing error: {markdown_error}")
                    from formatters import MessageFormatter

                    clean_message = MessageFormatter.clean_markdown(reply_message)
                    await query.message.reply_text(clean_message)

            except Exception as e:
                logger.error(f"Error processing example query: {e}")
                await query.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

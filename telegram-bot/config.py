import os
from dataclasses import dataclass
from typing import Optional


@dataclass
class BotConfig:
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Telegram –±–æ—Ç–∞"""

    telegram_token: str
    backend_url: str
    log_level: str = "INFO"
    max_retries: int = 3
    request_timeout: int = 30
    cache_ttl: int = 300  # 5 –º–∏–Ω—É—Ç
    max_query_length: int = 2000
    max_records_display: int = 5
    max_sample_records: int = 3


class Config:
    """–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –∫–ª–∞—Å—Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""

    @staticmethod
    def load_from_env() -> BotConfig:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
        telegram_token = os.getenv("TELEGRAM_TOKEN")
        if not telegram_token:
            raise ValueError("TELEGRAM_TOKEN not found in environment variables")

        return BotConfig(
            telegram_token=telegram_token,
            backend_url=os.getenv("BACKEND_URL", "http://localhost:8000"),
            log_level=os.getenv("LOG_LEVEL", "INFO"),
            max_retries=int(os.getenv("MAX_RETRIES", "3")),
            request_timeout=int(os.getenv("REQUEST_TIMEOUT", "30")),
            cache_ttl=int(os.getenv("CACHE_TTL", "300")),
            max_query_length=int(os.getenv("MAX_QUERY_LENGTH", "2000")),
            max_records_display=int(os.getenv("MAX_RECORDS_DISPLAY", "5")),
            max_sample_records=int(os.getenv("MAX_SAMPLE_RECORDS", "3")),
        )


# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è callback –¥–∞–Ω–Ω—ã—Ö
class CallbackData:
    """–ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è callback –¥–∞–Ω–Ω—ã—Ö inline –∫–Ω–æ–ø–æ–∫"""

    EXAMPLE_PREFIX = "ex:"

    # –†—É—Å—Å–∫–∏–µ –ø—Ä–∏–º–µ—Ä—ã
    TIME_RU = "time_ru"
    SALES_RU = "sales_ru"
    BESTSELLER_RU = "bestseller_ru"

    # –ê–Ω–≥–ª–∏–π—Å–∫–∏–µ –ø—Ä–∏–º–µ—Ä—ã
    TIME_EN = "time_en"
    SALES_EN = "sales_en"
    BESTSELLER_EN = "bestseller_en"

    # –ú–∞–ø–ø–∏–Ω–≥ –Ω–∞ –ø–æ–ª–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
    EXAMPLES_MAP = {
        TIME_RU: "–ü–æ–∫–∞–∂–∏ —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è",
        SALES_RU: "–ö–∞–∫–æ–≤–∞ –æ–±—â–∞—è —Å—É–º–º–∞ –ø—Ä–æ–¥–∞–∂ –≤ —è–Ω–≤–∞—Ä–µ 2025 –≥–æ–¥–∞?",
        BESTSELLER_RU: "–ö–∞–∫–æ–π —Ç–æ–≤–∞—Ä –ø—Ä–æ–¥–∞–µ—Ç—Å—è –ª—É—á—à–µ –≤—Å–µ–≥–æ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É?",
        TIME_EN: "Show current time",
        SALES_EN: "What is the total sales amount in January 2025?",
        BESTSELLER_EN: "What is the best-selling product by quantity?",
    }


# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è emoji –∏ —Å–∏–º–≤–æ–ª–æ–≤
class Emoji:
    """–ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è emoji –∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤"""

    SEARCH = "üîç"
    SUCCESS = "‚úÖ"
    ERROR = "‚ùå"
    CROSS = "‚ùå"  # Alias for ERROR
    TARGET = "üéØ"  # Target emoji for selections
    DATABASE = "üìä"
    TABLE = "üìã"
    VIEW = "üëÅÔ∏è"
    RECORD = "üîπ"
    FOLDER = "üóÇÔ∏è"
    LIGHTBULB = "üí°"
    GEAR = "‚öôÔ∏è"
    GLOBE = "üåê"
    SPEECH = "üí¨"
    TOOL = "üîß"
    NULL_VALUE = "‚àÖ"
    TIME = "‚è±Ô∏è"

    # Aliases for convenience
    CHECK = "‚úÖ"  # Alias for SUCCESS

    # Flag emojis
    FLAG_US = "üá∫üá∏"
    FLAG_RU = "üá∑üá∫"

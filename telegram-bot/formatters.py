import re
from typing import Dict, Any, List
from translations import get_translation


class MessageFormatter:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π Telegram"""

    @staticmethod
    def clean_markdown(text: str) -> str:
        """–£–¥–∞–ª–µ–Ω–∏–µ Markdown —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∞–∫ –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç"""
        if not text:
            return ""

        # –£–¥–∞–ª—è–µ–º –±–ª–æ–∫–∏ –∫–æ–¥–∞ (–º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω—ã–µ)
        text = re.sub(r"```[\w]*\n?(.*?)\n?```", r"\1", text, flags=re.DOTALL)

        # –£–¥–∞–ª—è–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –∫–æ–¥
        text = re.sub(r"`([^`]+)`", r"\1", text)

        # –£–¥–∞–ª—è–µ–º –∂–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç
        text = re.sub(r"\*\*([^*]+)\*\*", r"\1", text)

        # –£–¥–∞–ª—è–µ–º –∫—É—Ä—Å–∏–≤ (–∏ * –∏ _)
        text = re.sub(r"\*([^*]+)\*", r"\1", text)
        text = re.sub(r"_([^_]+)_", r"\1", text)

        # –£–¥–∞–ª—è–µ–º –∑–∞—á–µ—Ä–∫–Ω—É—Ç—ã–π —Ç–µ–∫—Å—Ç
        text = re.sub(r"~~([^~]+)~~", r"\1", text)

        # –£–¥–∞–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
        text = re.sub(r"^#{1,6}\s+", "", text, flags=re.MULTILINE)

        # –£–¥–∞–ª—è–µ–º —Å—Å—ã–ª–∫–∏, –Ω–æ –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
        text = re.sub(r"\[([^\]]+)\]\([^)]+\)", r"\1", text)

        # –£–¥–∞–ª—è–µ–º —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
        text = text.replace("\\*", "*")
        text = text.replace("\\_", "_")
        text = text.replace("\\`", "`")
        text = text.replace("\\#", "#")
        text = text.replace("\\[", "[")
        text = text.replace("\\]", "]")
        text = text.replace("\\(", "(")
        text = text.replace("\\)", ")")

        # –û—á–∏—â–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
        text = re.sub(r"\n\s*\n", "\n\n", text)  # –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫ –≤ –¥–≤–æ–π–Ω—ã–µ
        text = text.strip()

        return text

    @staticmethod
    def escape_markdown(text: str) -> str:
        """–≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ Markdown –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        if not text:
            return ""

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å—Ç—Ä–æ–∫—É –µ—Å–ª–∏ –µ—â–µ –Ω–µ —Å—Ç—Ä–æ–∫–∞
        text = str(text)

        # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Å–∞–º—ã–µ –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã Markdown
        # –≠—Ç–æ —Ç–µ, –∫–æ—Ç–æ—Ä—ã–µ —á–∞—â–µ –≤—Å–µ–≥–æ –≤—ã–∑—ã–≤–∞—é—Ç –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞
        text = text.replace("_", "\\_")
        text = text.replace("*", "\\*")
        text = text.replace("`", "\\`")
        text = text.replace("[", "\\[")
        text = text.replace("]", "\\]")

        return text

    @staticmethod
    def format_tables_list(tables: List[Dict[str, Any]], database_name: str) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ç–∞–±–ª–∏—Ü"""
        reply_message = f"üìä *Available tables in {database_name}*\n\n"
        reply_message += f"üî¢ Total: {len(tables)} objects\n\n"

        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Å—Ö–µ–º–µ
        schemas = {}
        for table in tables:
            schema = table["schema_name"]
            if schema not in schemas:
                schemas[schema] = {"tables": [], "views": []}

            if table["object_type"] == "view":
                schemas[schema]["views"].append(table)
            else:
                schemas[schema]["tables"].append(table)

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é —Å—Ö–µ–º—É
        for schema_name, objects in schemas.items():
            reply_message += f"üóÇÔ∏è *Schema: {schema_name}*\n"

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã
            if objects["tables"]:
                reply_message += f"üìã Tables ({len(objects['tables'])}):\n"
                for table in objects["tables"]:
                    safe_name = MessageFormatter.escape_markdown(table["full_name"])
                    reply_message += f"   ‚Ä¢ `{safe_name}`\n"

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è
            if objects["views"]:
                reply_message += f"üëÅÔ∏è Views ({len(objects['views'])}):\n"
                for view in objects["views"]:
                    safe_name = MessageFormatter.escape_markdown(view["full_name"])
                    reply_message += f"   ‚Ä¢ `{safe_name}`\n"

            reply_message += "\n"

        reply_message += "üí° *Usage:*\n"
        reply_message += "‚Ä¢ `/sample <table_name>` - show sample data\n"
        reply_message += "‚Ä¢ Ask questions in natural language!"

        return reply_message

    @staticmethod
    def format_sample_data(data: List[Dict[str, Any]], table_name: str) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–∑—Ü–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ç–∞–±–ª–∏—Ü—ã"""
        reply_message = f"üìä *Sample data from `{table_name}`*\n\n"
        reply_message += f"üî¢ Records shown: {len(data)}/3\n\n"

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é –∑–∞–ø–∏—Å—å
        for i, row in enumerate(data):
            reply_message += f"üîπ *Record {i+1}:*\n"
            for key, value in row.items():
                # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã Markdown
                safe_key = MessageFormatter.escape_markdown(str(key))
                safe_value = MessageFormatter.escape_markdown(str(value) if value is not None else "NULL")
                reply_message += f"   ‚Ä¢ {safe_key}: `{safe_value}`\n"
            reply_message += "\n"

        return reply_message

    @staticmethod
    def format_query_result(result: Dict[str, Any], settings: Dict[str, Any]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∑–∞–ø—Ä–æ—Å–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –º–Ω–æ–≥–æ—è–∑—ã—á–Ω–æ—Å—Ç–∏"""
        lang = settings.get("preferred_language", "en")
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        reply_message = f"*{get_translation(lang, 'query_result_title')}*\n\n"

        # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã
        if result.get("data") and len(result["data"]) > 0:
            data_count = len(result["data"])
            reply_message += get_translation(lang, "records_found").format(count=data_count) + "\n\n"

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–ø–∏—Å–µ–π (–¥–æ 5 –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏)
            max_records = min(5, data_count)
            for i, row in enumerate(result["data"][:max_records]):
                reply_message += get_translation(lang, "record_number").format(num=i+1) + "\n"
                
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –ø–æ–ª—è –±–æ–ª–µ–µ –∫—Ä–∞—Å–∏–≤–æ
                for key, value in row.items():
                    safe_key = MessageFormatter.escape_markdown(str(key))
                    
                    # –£–ª—É—á—à–∞–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π
                    if value is None:
                        safe_value = "‚àÖ"  # –ö—Ä–∞—Å–∏–≤—ã–π —Å–∏–º–≤–æ–ª –¥–ª—è NULL
                    elif isinstance(value, (int, float)):
                        safe_value = f"`{value}`"  # –ß–∏—Å–ª–∞ –≤ –º–æ–Ω–æ—à–∏—Ä–∏–Ω–Ω–æ–º —à—Ä–∏—Ñ—Ç–µ
                    elif isinstance(value, str) and len(value) > 50:
                        # –î–ª–∏–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ —Å–æ–∫—Ä–∞—â–∞–µ–º
                        truncated = value[:47] + "..." if len(value) > 50 else value
                        safe_value = f"_{MessageFormatter.escape_markdown(truncated)}_"
                    else:
                        safe_value = f"_{MessageFormatter.escape_markdown(str(value))}_"
                    
                    reply_message += f"   ‚Ä¢ *{safe_key}*: {safe_value}\n"
                reply_message += "\n"

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–∫–æ–ª—å–∫–æ –µ—â–µ –∑–∞–ø–∏—Å–µ–π
            if data_count > max_records:
                remaining = data_count - max_records
                reply_message += get_translation(lang, "more_records").format(count=remaining) + "\n\n"

        elif result.get("data") is not None and len(result["data"]) == 0:
            # –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–∏–ª—Å—è, –Ω–æ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç
            reply_message += "üìã " + ("No records found" if lang == "en" else "–ó–∞–ø–∏—Å–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã") + "\n\n"

        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ –∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–æ
        if settings.get("show_explanation", True) and result.get("explanation"):
            safe_explanation = MessageFormatter.escape_markdown(result["explanation"])
            reply_message += f"*{get_translation(lang, 'explanation_title')}*\n"
            reply_message += f"_{safe_explanation}_\n\n"

        # –î–æ–±–∞–≤–ª—è–µ–º SQL –∑–∞–ø—Ä–æ—Å –µ—Å–ª–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–æ
        if settings.get("show_sql", False) and result.get("sql_query"):
            sql_query = result["sql_query"]
            reply_message += f"*{get_translation(lang, 'sql_query_title')}*\n"
            reply_message += f"```sql\n{sql_query}\n```\n\n"

        # –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        if result.get("execution_time"):
            execution_time = result["execution_time"]
            reply_message += get_translation(lang, "execution_time").format(time=execution_time)

        return reply_message

#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
"""

import asyncio
import logging
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ backend –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π
sys.path.append(os.path.join(os.path.dirname(__file__), '..', 'backend'))

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class MockSettings:
    """–ú–æ–∫ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    def __init__(self):
        self.openai_model = "gpt-3.5-turbo"
        self.openai_temperature = 0.1
        self.openai_api_key = "test-key"

class MockAppDatabaseService:
    """–ú–æ–∫ –¥–ª—è app_database_service"""
    def __init__(self):
        self.is_connected = True
    
    async def get_database_schema_with_user_permissions(self, user_id, database_name, include_views=True, schema_name="public"):
        """–ú–æ–∫ —Ñ—É–Ω–∫—Ü–∏–∏ get_database_schema_with_user_permissions"""
        logger.info(f"Mock: get_database_schema_with_user_permissions called for user {user_id}")
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –º–æ–∫ —Å—Ö–µ–º—É —Å –ø—Ä–∞–≤–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        mock_schema = {
            "users": {
                "columns": [
                    {"name": "id", "description": "ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", "datatype": "uuid", "type": "uuid", "nullable": False, "default": None},
                    {"name": "username", "description": "–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", "datatype": "character varying", "type": "character varying", "nullable": False, "default": None},
                    {"name": "email", "description": "Email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", "datatype": "character varying", "type": "character varying", "nullable": True, "default": None}
                ],
                "description": "–¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–¥–æ—Å—Ç—É–ø–Ω–∞—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é)",
                "object_type": "table",
                "schema_name": "public"
            },
            "user_permissions": {
                "columns": [
                    {"name": "id", "description": "ID –∑–∞–ø–∏—Å–∏", "datatype": "uuid", "type": "uuid", "nullable": False, "default": None},
                    {"name": "role_name", "description": "–ù–∞–∑–≤–∞–Ω–∏–µ —Ä–æ–ª–∏", "datatype": "character varying", "type": "character varying", "nullable": False, "default": None},
                    {"name": "table_name", "description": "–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã", "datatype": "character varying", "type": "character varying", "nullable": False, "default": None},
                    {"name": "permission_type", "description": "–¢–∏–ø —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è", "datatype": "character varying", "type": "character varying", "nullable": False, "default": None}
                ],
                "description": "–ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∫ —Ç–∞–±–ª–∏—Ü–∞–º",
                "object_type": "table",
                "schema_name": "public"
            }
        }
        
        logger.info(f"Mock: –í–æ–∑–≤—Ä–∞—â–µ–Ω–æ {len(mock_schema)} —Ç–∞–±–ª–∏—Ü –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        return mock_schema
    
    async def execute_query(self, query, params=None):
        """–ú–æ–∫ —Ñ—É–Ω–∫—Ü–∏–∏ execute_query"""
        logger.info(f"Mock: execute_query called with query: {query[:100]}...")
        
        # –ú–æ–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if "users_role_bd_mapping" in query and "role_name" in query:
            return MockDatabaseQueryResult([
                {"role_name": "admin"}
            ])
        
        return MockDatabaseQueryResult([])

class MockDataDatabaseService:
    """–ú–æ–∫ –¥–ª—è data_database_service"""
    def __init__(self):
        self.is_connected = True
    
    def get_database_name(self):
        """–ú–æ–∫ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–º–µ–Ω–∏ –ë–î"""
        return "cloverdash_bot"

class MockDatabaseQueryResult:
    """–ú–æ–∫ –¥–ª—è DatabaseQueryResult"""
    def __init__(self, data):
        self.data = data
        self.columns = list(data[0].keys()) if data else []
        self.row_count = len(data)
        self.execution_time = 0.0

class MockLLMQueryResponse:
    """–ú–æ–∫ –¥–ª—è LLMQueryResponse"""
    def __init__(self, sql_query: str, explanation: str, execution_time: float):
        self.sql_query = sql_query
        self.explanation = explanation
        self.execution_time = execution_time

async def test_fixed_functions():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏"""
    
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π")
    print("=" * 60)
    
    # –°–æ–∑–¥–∞–µ–º –º–æ–∫–∏
    print("\n1Ô∏è‚É£ –°–æ–∑–¥–∞–Ω–∏–µ –º–æ–∫–æ–≤...")
    
    # –ú–æ–∫–∞–µ–º –º–æ–¥—É–ª–∏
    sys.modules['config.settings'] = MockSettings()
    sys.modules['models.llm'] = MockLLMQueryResponse
    
    # –°–æ–∑–¥–∞–µ–º –º–æ–∫ —Å–µ—Ä–≤–∏—Å–æ–≤
    mock_app_db = MockAppDatabaseService()
    mock_data_db = MockDataDatabaseService()
    
    print("‚úÖ –ú–æ–∫–∏ —Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ")
    
    # –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ—É–Ω–∫—Ü–∏–∏ get_database_schema_with_user_permissions
    print("\n2Ô∏è‚É£ –¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–∏ get_database_schema_with_user_permissions...")
    
    test_user_id = "test_user_123"
    test_database_name = "cloverdash_bot"
    
    try:
        # –°–∏–º—É–ª–∏—Ä—É–µ–º –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏
        schema = await mock_app_db.get_database_schema_with_user_permissions(
            user_id=test_user_id,
            database_name=test_database_name,
            include_views=True,
            schema_name="public"
        )
        
        print(f"‚úÖ –°—Ö–µ–º–∞ –ë–î –ø–æ–ª—É—á–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {test_user_id}")
        print(f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–∞–±–ª–∏—Ü: {len(schema)}")
        print(f"   –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã: {', '.join(schema.keys())}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å—Ö–µ–º—ã
        for table_name, table_info in schema.items():
            print(f"   üìã {table_name}: {table_info['description']}")
            print(f"      –ö–æ–ª–æ–Ω–æ–∫: {len(table_info['columns'])}")
            print(f"      –¢–∏–ø: {table_info['object_type']}")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ö–µ–º—ã –ë–î: {e}")
    
    # –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    print("\n3Ô∏è‚É£ –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...")
    
    try:
        # –°–∏–º—É–ª–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ —Ä–æ–ª–∏
        query = """
        SELECT role_name 
        FROM users_role_bd_mapping 
        WHERE user_id = $1
        """
        result = await mock_app_db.execute_query(query, [test_user_id])
        
        if result and result.data:
            role_name = result.data[0]['role_name']
            print(f"‚úÖ –†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–ª—É—á–µ–Ω–∞: {role_name}")
        else:
            print("‚ùå –†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–æ–ª–∏: {e}")
    
    # –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –ø—Ä–∞–≤–∞–º
    print("\n4Ô∏è‚É£ –¢–µ—Å—Ç —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –ø—Ä–∞–≤–∞–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...")
    
    try:
        # –°–∏–º—É–ª–∏—Ä—É–µ–º —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é
        descriptions = {
            "cloverdash_bot.public.users": {"description": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", "object_type": "table"},
            "cloverdash_bot.public.admin_data": {"description": "–ê–¥–º–∏–Ω—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ", "object_type": "table"},
            "cloverdash_bot.public.user_permissions": {"description": "–ü—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", "object_type": "table"}
        }
        
        # –í —Ä–µ–∞–ª—å–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –∑–¥–µ—Å—å –±—ã–ª–∞ –±—ã —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –ø—Ä–∞–≤–∞–º
        accessible_tables = ["users", "user_permissions"]  # –ú–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü
        
        filtered_descriptions = {}
        for key, description in descriptions.items():
            table_name = key.split(".")[-1]
            if table_name in accessible_tables:
                filtered_descriptions[key] = description
        
        print(f"‚úÖ –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞")
        print(f"   –ò—Å—Ö–æ–¥–Ω—ã—Ö –æ–ø–∏—Å–∞–Ω–∏–π: {len(descriptions)}")
        print(f"   –î–æ—Å—Ç—É–ø–Ω—ã—Ö –æ–ø–∏—Å–∞–Ω–∏–π: {len(filtered_descriptions)}")
        print(f"   –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã: {', '.join(filtered_descriptions.keys())}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏: {e}")
    
    print("\n" + "=" * 60)
    print("üéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
    print("\nüìã –†–µ–∑—é–º–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π:")
    print("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è get_database_schema_with_user_permissions –≤ app_database_service")
    print("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è _filter_descriptions_by_user_permissions")
    print("‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è get_user_accessible_tables –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å user_permissions")
    print("‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è _check_user_permissions_table_exists")
    print("‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è _get_user_role –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–æ–ª–∏ –∏–∑ –ë–î")

if __name__ == "__main__":
    asyncio.run(test_fixed_functions())

#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ª–æ–≥–æ–≤ –≤—Ö–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ Telegram –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
"""

import sys
import os
import time
import pandas as pd
from sqlalchemy import create_engine, text
from datetime import datetime, timedelta

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append('.')

def get_db_connection():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î"""
    try:
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ backend
        backend_path = os.path.join(os.path.dirname(__file__), '..', 'backend')
        if backend_path not in sys.path:
            sys.path.insert(0, backend_path)
        
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        from config.settings import settings
        db_url = settings.get_app_database_url()
        engine = create_engine(db_url)
        return engine
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        # Fallback - –ø–æ–ø—Ä–æ–±—É–µ–º —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
        from dotenv import load_dotenv
        load_dotenv()
        
        db_url = os.getenv('DATABASE_URL') or os.getenv('APP_DATABASE_URL')
        if db_url:
            engine = create_engine(db_url)
            return engine
        else:
            print("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å URL –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
            return None

def get_recent_logins(minutes=5):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–µ–¥–∞–≤–Ω–∏—Ö –≤—Ö–æ–¥–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    engine = get_db_connection()
    if not engine:
        return []
    
    try:
        with engine.connect() as conn:
            query = text("""
                SELECT 
                    ulh.*,
                    u.username,
                    u.full_name,
                    u.telegram_username
                FROM user_login_history ulh
                LEFT JOIN users u ON ulh.user_id = u.id
                WHERE ulh.login_time >= NOW() - INTERVAL ':minutes minutes'
                ORDER BY ulh.login_time DESC
            """)
            
            result = conn.execute(query, {'minutes': minutes})
            return result.fetchall()
            
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–µ–¥–∞–≤–Ω–∏—Ö –≤—Ö–æ–¥–æ–≤: {e}")
        return []

def get_recent_activity(minutes=5):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–µ–¥–∞–≤–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    engine = get_db_connection()
    if not engine:
        return []
    
    try:
        with engine.connect() as conn:
            query = text("""
                SELECT 
                    ua.*,
                    u.username,
                    u.full_name,
                    u.telegram_username
                FROM user_activity ua
                LEFT JOIN users u ON ua.user_id = u.id
                WHERE ua.activity_time >= NOW() - INTERVAL ':minutes minutes'
                ORDER BY ua.activity_time DESC
            """)
            
            result = conn.execute(query, {'minutes': minutes})
            return result.fetchall()
            
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–µ–¥–∞–≤–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {e}")
        return []

def get_recent_database_access(minutes=5):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–µ–¥–∞–≤–Ω–µ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    engine = get_db_connection()
    if not engine:
        return []
    
    try:
        with engine.connect() as conn:
            query = text("""
                SELECT 
                    dal.*,
                    u.username,
                    u.full_name,
                    u.telegram_username
                FROM database_access_log dal
                LEFT JOIN users u ON dal.user_id = u.id
                WHERE dal.access_time >= NOW() - INTERVAL ':minutes minutes'
                ORDER BY dal.access_time DESC
            """)
            
            result = conn.execute(query, {'minutes': minutes})
            return result.fetchall()
            
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–µ–¥–∞–≤–Ω–µ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –ë–î: {e}")
        return []

def get_active_connections():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –∫ –ë–î"""
    engine = get_db_connection()
    if not engine:
        return []
    
    try:
        with engine.connect() as conn:
            query = text("""
                SELECT 
                    pid,
                    usename,
                    application_name,
                    client_addr,
                    client_port,
                    backend_start,
                    state,
                    query_start,
                    query
                FROM pg_stat_activity 
                WHERE state = 'active' 
                AND query NOT LIKE '%pg_stat_activity%'
                AND usename != 'postgres'
                ORDER BY query_start DESC
            """)
            
            result = conn.execute(query)
            return result.fetchall()
            
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π: {e}")
        return []

def display_recent_logins(logins):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ–¥–∞–≤–Ω–∏—Ö –≤—Ö–æ–¥–æ–≤"""
    if logins:
        print(f"üîê –ù–µ–¥–∞–≤–Ω–∏–µ –≤—Ö–æ–¥—ã ({len(logins)}):")
        for login in logins:
            status = "‚úÖ" if login.success else "‚ùå"
            print(f"   {status} {login.username or login.telegram_username or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}")
            print(f"      üì± Telegram: @{login.telegram_username or '–Ω–µ —É–∫–∞–∑–∞–Ω'}")
            print(f"      üïê –í—Ä–µ–º—è: {login.login_time}")
            print(f"      üåê IP: {login.ip_address or '–Ω–µ —É–∫–∞–∑–∞–Ω'}")
            if not login.success and login.error_message:
                print(f"      ‚ùå –û—à–∏–±–∫–∞: {login.error_message}")
            print()

def display_recent_activity(activities):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ–¥–∞–≤–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
    if activities:
        print(f"üìä –ù–µ–¥–∞–≤–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å ({len(activities)}):")
        for activity in activities:
            print(f"   üéØ {activity.username or activity.telegram_username or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}")
            print(f"      üì± Telegram: @{activity.telegram_username or '–Ω–µ —É–∫–∞–∑–∞–Ω'}")
            print(f"      üïê –í—Ä–µ–º—è: {activity.activity_time}")
            print(f"      üîß –î–µ–π—Å—Ç–≤–∏–µ: {activity.action}")
            if activity.details:
                print(f"      üìù –î–µ—Ç–∞–ª–∏: {activity.details}")
            print()

def display_recent_database_access(access_logs):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ–¥–∞–≤–Ω–µ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –ë–î"""
    if access_logs:
        print(f"üóÑÔ∏è –ù–µ–¥–∞–≤–Ω–∏–π –¥–æ—Å—Ç—É–ø –∫ –ë–î ({len(access_logs)}):")
        for access in access_logs:
            status = "‚úÖ" if access.success else "‚ùå"
            print(f"   {status} {access.username or access.telegram_username or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}")
            print(f"      üì± Telegram: @{access.telegram_username or '–Ω–µ —É–∫–∞–∑–∞–Ω'}")
            print(f"      üïê –í—Ä–µ–º—è: {access.access_time}")
            print(f"      üóÑÔ∏è –ë–î: {access.database_name}.{access.schema_name}.{access.table_name}")
            print(f"      üîß –û–ø–µ—Ä–∞—Ü–∏—è: {access.operation}")
            if access.query_text:
                query_preview = access.query_text[:50] + "..." if len(access.query_text) > 50 else access.query_text
                print(f"      üìù –ó–∞–ø—Ä–æ—Å: {query_preview}")
            if not access.success and access.error_message:
                print(f"      ‚ùå –û—à–∏–±–∫–∞: {access.error_message}")
            print()

def display_active_connections(connections):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π"""
    if connections:
        print(f"üîå –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è ({len(connections)}):")
        for conn in connections:
            print(f"   üÜî PID: {conn.pid}")
            print(f"      üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {conn.usename}")
            print(f"      üì± –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: {conn.application_name or '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}")
            print(f"      üåê IP: {conn.client_addr}:{conn.client_port}")
            print(f"      üïê –ù–∞—á–∞–ª–æ: {conn.backend_start}")
            if conn.query:
                query_preview = conn.query[:50] + "..." if len(conn.query) > 50 else conn.query
                print(f"      üîç –ó–∞–ø—Ä–æ—Å: {query_preview}")
            print()

def monitor_telegram_logs(interval=30, duration=300):
    """
    –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ª–æ–≥–æ–≤ Telegram –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
    
    Args:
        interval: –∏–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 30)
        duration: –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 300 = 5 –º–∏–Ω—É—Ç)
    """
    print("üîç –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ª–æ–≥–æ–≤ –≤—Ö–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ Telegram")
    print("=" * 70)
    print(f"‚è±Ô∏è –ò–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {interval} —Å–µ–∫—É–Ω–¥")
    print(f"‚è∞ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration} —Å–µ–∫—É–Ω–¥")
    print("üõë –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
    print("=" * 70)
    
    start_time = time.time()
    last_check_time = datetime.now()
    
    try:
        while time.time() - start_time < duration:
            current_time = datetime.now()
            
            print(f"\nüïê {current_time.strftime('%Y-%m-%d %H:%M:%S')}")
            print("-" * 50)
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –º–∏–Ω—É—Ç
            recent_logins = get_recent_logins(5)
            recent_activity = get_recent_activity(5)
            recent_db_access = get_recent_database_access(5)
            active_connections = get_active_connections()
            
            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            display_recent_logins(recent_logins)
            display_recent_activity(recent_activity)
            display_recent_database_access(recent_db_access)
            display_active_connections(active_connections)
            
            # –ï—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            if not recent_logins and not recent_activity and not recent_db_access:
                print("‚ÑπÔ∏è –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –º–∏–Ω—É—Ç")
            
            print(f"‚è≥ –°–ª–µ–¥—É—é—â–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ {interval} —Å–µ–∫—É–Ω–¥...")
            time.sleep(interval)
            
    except KeyboardInterrupt:
        print("\nüõë –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
    
    print("\n‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω")

def show_summary():
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–≤–æ–¥–∫—É –ø–æ –≤—Å–µ–º –ª–æ–≥–∞–º"""
    print("üìä –°–≤–æ–¥–∫–∞ –ø–æ –ª–æ–≥–∞–º Telegram –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
    print("=" * 50)
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å
    recent_logins = get_recent_logins(60)
    recent_activity = get_recent_activity(60)
    recent_db_access = get_recent_database_access(60)
    
    print(f"üîê –í—Ö–æ–¥—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å: {len(recent_logins)}")
    print(f"üìä –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å: {len(recent_activity)}")
    print(f"üóÑÔ∏è –î–æ—Å—Ç—É–ø –∫ –ë–î –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å: {len(recent_db_access)}")
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
    if recent_logins:
        unique_users = set()
        for login in recent_logins:
            user = login.username or login.telegram_username or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
            unique_users.add(user)
        print(f"üë• –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(unique_users)}")
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –æ–ø–µ—Ä–∞—Ü–∏—è–º
    if recent_db_access:
        operations = {}
        for access in recent_db_access:
            op = access.operation
            operations[op] = operations.get(op, 0) + 1
        print("üîß –û–ø–µ—Ä–∞—Ü–∏–∏ —Å –ë–î:")
        for op, count in operations.items():
            print(f"   {op}: {count}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    if len(sys.argv) > 1:
        command = sys.argv[1]
        
        if command == "monitor":
            interval = int(sys.argv[2]) if len(sys.argv) > 2 else 30
            duration = int(sys.argv[3]) if len(sys.argv) > 3 else 300
            monitor_telegram_logs(interval, duration)
        elif command == "summary":
            show_summary()
        else:
            print("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")
            print("üí° –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:")
            print("   python monitor_telegram_logs.py monitor [interval] [duration]")
            print("   python monitor_telegram_logs.py summary")
    else:
        # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–≤–æ–¥–∫—É
        show_summary()
        print("\nüí° –î–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:")
        print("   python monitor_telegram_logs.py monitor")

if __name__ == "__main__":
    main()

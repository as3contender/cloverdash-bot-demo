#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ª–æ–≥–æ–≤ –≤—Ö–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ Telegram
"""

import sys
import os
import pandas as pd
from sqlalchemy import create_engine, text
from datetime import datetime, timedelta
import re

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append('.')

def get_db_connection():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î"""
    try:
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ backend
        backend_path = os.path.join(os.path.dirname(__file__), '..', 'backend')
        if backend_path not in sys.path:
            sys.path.insert(0, backend_path)
        
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        from config.settings import settings
        db_url = settings.get_app_database_url()
        engine = create_engine(db_url)
        return engine
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        # Fallback - –ø–æ–ø—Ä–æ–±—É–µ–º —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
        from dotenv import load_dotenv
        load_dotenv()
        
        db_url = os.getenv('DATABASE_URL') or os.getenv('APP_DATABASE_URL')
        if db_url:
            engine = create_engine(db_url)
            return engine
        else:
            print("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å URL –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
            return None

def get_telegram_users():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å Telegram ID"""
    print("=== –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å Telegram ID ===")
    
    engine = get_db_connection()
    if not engine:
        return
    
    try:
        with engine.connect() as conn:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å Telegram ID
            query = text("""
                SELECT 
                    id,
                    username,
                    full_name,
                    telegram_id,
                    telegram_username,
                    is_active,
                    created_at,
                    updated_at
                FROM users 
                WHERE telegram_id IS NOT NULL 
                ORDER BY created_at DESC
            """)
            
            result = conn.execute(query)
            users = result.fetchall()
            
            if users:
                print(f"üì± –ù–∞–π–¥–µ–Ω–æ {len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å Telegram ID:")
                print()
                
                for user in users:
                    status = "–∞–∫—Ç–∏–≤–µ–Ω" if user.is_active else "–Ω–µ–∞–∫—Ç–∏–≤–µ–Ω"
                    print(f"üë§ {user.username or '–ë–µ–∑ –∏–º–µ–Ω–∏'}")
                    print(f"   üì± Telegram ID: {user.telegram_id}")
                    print(f"   üìõ Telegram username: @{user.telegram_username or '–Ω–µ —É–∫–∞–∑–∞–Ω'}")
                    print(f"   üë®‚Äçüíº –ü–æ–ª–Ω–æ–µ –∏–º—è: {user.full_name or '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}")
                    print(f"   ‚úÖ –°—Ç–∞—Ç—É—Å: {status}")
                    print(f"   üìÖ –°–æ–∑–¥–∞–Ω: {user.created_at}")
                    print(f"   üîÑ –û–±–Ω–æ–≤–ª–µ–Ω: {user.updated_at}")
                    print()
            else:
                print("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å Telegram ID –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")

def get_user_login_history():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –≤—Ö–æ–¥–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    print("=== –ò—Å—Ç–æ—Ä–∏—è –≤—Ö–æ–¥–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ===")
    
    engine = get_db_connection()
    if not engine:
        return
    
    try:
        with engine.connect() as conn:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–∞–±–ª–∏—Ü–∞ –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏ –≤—Ö–æ–¥–æ–≤
            query = text("""
                SELECT EXISTS (
                    SELECT FROM information_schema.tables 
                    WHERE table_schema = 'public' 
                    AND table_name = 'user_login_history'
                )
            """)
            result = conn.execute(query)
            table_exists = result.scalar()
            
            if table_exists:
                # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –≤—Ö–æ–¥–æ–≤
                query = text("""
                    SELECT 
                        ulh.*,
                        u.username,
                        u.telegram_id,
                        u.telegram_username
                    FROM user_login_history ulh
                    LEFT JOIN users u ON ulh.user_id = u.id
                    ORDER BY ulh.login_time DESC
                    LIMIT 50
                """)
                
                result = conn.execute(query)
                logins = result.fetchall()
                
                if logins:
                    print(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(logins)} –∑–∞–ø–∏—Å–µ–π –æ –≤—Ö–æ–¥–∞—Ö:")
                    print()
                    
                    for login in logins:
                        print(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {login.username or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}")
                        print(f"   üì± Telegram ID: {login.telegram_id or '–Ω–µ —É–∫–∞–∑–∞–Ω'}")
                        print(f"   üìõ Telegram username: @{login.telegram_username or '–Ω–µ —É–∫–∞–∑–∞–Ω'}")
                        print(f"   üïê –í—Ä–µ–º—è –≤—Ö–æ–¥–∞: {login.login_time}")
                        print(f"   üåê IP –∞–¥—Ä–µ—Å: {login.ip_address or '–Ω–µ —É–∫–∞–∑–∞–Ω'}")
                        print(f"   üì± User Agent: {login.user_agent or '–Ω–µ —É–∫–∞–∑–∞–Ω'}")
                        print(f"   ‚úÖ –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {'–î–∞' if login.success else '–ù–µ—Ç'}")
                        if login.error_message:
                            print(f"   ‚ùå –û—à–∏–±–∫–∞: {login.error_message}")
                        print()
                else:
                    print("‚ùå –ó–∞–ø–∏—Å–∏ –æ –≤—Ö–æ–¥–∞—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            else:
                print("‚ÑπÔ∏è –¢–∞–±–ª–∏—Ü–∞ user_login_history –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                print("üí° –°–æ–∑–¥–∞–π—Ç–µ —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –≤—Ö–æ–¥–æ–≤")
                
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ –≤—Ö–æ–¥–æ–≤: {e}")

def get_recent_activity():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–µ–¥–∞–≤–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    print("=== –ù–µ–¥–∞–≤–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ===")
    
    engine = get_db_connection()
    if not engine:
        return
    
    try:
        with engine.connect() as conn:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–∞–±–ª–∏—Ü–∞ –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            query = text("""
                SELECT EXISTS (
                    SELECT FROM information_schema.tables 
                    WHERE table_schema = 'public' 
                    AND table_name = 'user_activity'
                )
            """)
            result = conn.execute(query)
            table_exists = result.scalar()
            
            if table_exists:
                # –ü–æ–ª—É—á–∞–µ–º –Ω–µ–¥–∞–≤–Ω—é—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
                query = text("""
                    SELECT 
                        ua.*,
                        u.username,
                        u.telegram_id,
                        u.telegram_username
                    FROM user_activity ua
                    LEFT JOIN users u ON ua.user_id = u.id
                    WHERE ua.activity_time >= NOW() - INTERVAL '24 hours'
                    ORDER BY ua.activity_time DESC
                    LIMIT 50
                """)
                
                result = conn.execute(query)
                activities = result.fetchall()
                
                if activities:
                    print(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(activities)} –∑–∞–ø–∏—Å–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞:")
                    print()
                    
                    for activity in activities:
                        print(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {activity.username or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}")
                        print(f"   üì± Telegram ID: {activity.telegram_id or '–Ω–µ —É–∫–∞–∑–∞–Ω'}")
                        print(f"   üìõ Telegram username: @{activity.telegram_username or '–Ω–µ —É–∫–∞–∑–∞–Ω'}")
                        print(f"   üïê –í—Ä–µ–º—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {activity.activity_time}")
                        print(f"   üéØ –î–µ–π—Å—Ç–≤–∏–µ: {activity.action or '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}")
                        print(f"   üìù –î–µ—Ç–∞–ª–∏: {activity.details or '–Ω–µ —É–∫–∞–∑–∞–Ω—ã'}")
                        print()
                else:
                    print("‚ùå –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            else:
                print("‚ÑπÔ∏è –¢–∞–±–ª–∏—Ü–∞ user_activity –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                print("üí° –°–æ–∑–¥–∞–π—Ç–µ —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
                
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {e}")

def analyze_log_files():
    """–ê–Ω–∞–ª–∏–∑ –ª–æ–≥-—Ñ–∞–π–ª–æ–≤"""
    print("=== –ê–Ω–∞–ª–∏–∑ –ª–æ–≥-—Ñ–∞–π–ª–æ–≤ ===")
    
    # –°–ø–∏—Å–æ–∫ –ª–æ–≥-—Ñ–∞–π–ª–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    log_files = [
        "admin_panel.log",
        "../backend/test_real_user.log",
        "../backend/schema_validation.log",
        "../backend/test_execute_query_with_user.log"
    ]
    
    for log_file in log_files:
        if os.path.exists(log_file):
            print(f"\nüìÑ –ê–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–∞: {log_file}")
            try:
                with open(log_file, 'r', encoding='utf-8') as f:
                    lines = f.readlines()
                    
                # –ò—â–µ–º –∑–∞–ø–∏—Å–∏ –æ Telegram –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö
                telegram_entries = []
                auth_entries = []
                user_entries = []
                
                for line in lines:
                    if 'telegram' in line.lower():
                        telegram_entries.append(line.strip())
                    elif 'auth' in line.lower() or 'login' in line.lower():
                        auth_entries.append(line.strip())
                    elif 'user' in line.lower() and ('found' in line.lower() or 'executing' in line.lower()):
                        user_entries.append(line.strip())
                
                if telegram_entries:
                    print(f"   üì± –ù–∞–π–¥–µ–Ω–æ {len(telegram_entries)} –∑–∞–ø–∏—Å–µ–π –æ Telegram:")
                    for entry in telegram_entries[-5:]:  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –∑–∞–ø–∏—Å–µ–π
                        print(f"      {entry}")
                
                if auth_entries:
                    print(f"   üîê –ù–∞–π–¥–µ–Ω–æ {len(auth_entries)} –∑–∞–ø–∏—Å–µ–π –æ–± –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏:")
                    for entry in auth_entries[-5:]:  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –∑–∞–ø–∏—Å–µ–π
                        print(f"      {entry}")
                
                if user_entries:
                    print(f"   üë§ –ù–∞–π–¥–µ–Ω–æ {len(user_entries)} –∑–∞–ø–∏—Å–µ–π –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö:")
                    for entry in user_entries[-5:]:  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –∑–∞–ø–∏—Å–µ–π
                        print(f"      {entry}")
                
                if not telegram_entries and not auth_entries and not user_entries:
                    print("   ‚ÑπÔ∏è –ó–∞–ø–∏—Å–∏ –æ Telegram –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                    
            except Exception as e:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}")
        else:
            print(f"‚ùå –§–∞–π–ª {log_file} –Ω–µ –Ω–∞–π–¥–µ–Ω")

def get_database_connections():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è—Ö –∫ –ë–î"""
    print("=== –ü–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö ===")
    
    engine = get_db_connection()
    if not engine:
        return
    
    try:
        with engine.connect() as conn:
            # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            query = text("""
                SELECT 
                    pid,
                    usename,
                    application_name,
                    client_addr,
                    client_port,
                    backend_start,
                    state,
                    query_start,
                    query
                FROM pg_stat_activity 
                WHERE state = 'active' 
                AND query NOT LIKE '%pg_stat_activity%'
                ORDER BY query_start DESC
            """)
            
            result = conn.execute(query)
            connections = result.fetchall()
            
            if connections:
                print(f"üîå –ù–∞–π–¥–µ–Ω–æ {len(connections)} –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π:")
                print()
                
                for conn_info in connections:
                    print(f"üÜî PID: {conn_info.pid}")
                    print(f"   üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {conn_info.usename}")
                    print(f"   üì± –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: {conn_info.application_name or '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}")
                    print(f"   üåê IP: {conn_info.client_addr}:{conn_info.client_port}")
                    print(f"   üïê –ù–∞—á–∞–ª–æ: {conn_info.backend_start}")
                    print(f"   üìä –°–æ—Å—Ç–æ—è–Ω–∏–µ: {conn_info.state}")
                    print(f"   üîç –ó–∞–ø—Ä–æ—Å: {conn_info.query[:100]}..." if conn_info.query else "   üîç –ó–∞–ø—Ä–æ—Å: –Ω–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è")
                    print()
            else:
                print("‚ÑπÔ∏è –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π: {e}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üîç –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤ –≤—Ö–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ Telegram")
    print("=" * 70)
    
    # 1. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å Telegram ID
    get_telegram_users()
    
    # 2. –ò—Å—Ç–æ—Ä–∏—è –≤—Ö–æ–¥–æ–≤
    get_user_login_history()
    
    # 3. –ù–µ–¥–∞–≤–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
    get_recent_activity()
    
    # 4. –ê–Ω–∞–ª–∏–∑ –ª–æ–≥-—Ñ–∞–π–ª–æ–≤
    analyze_log_files()
    
    # 5. –ü–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î
    get_database_connections()
    
    print("\n" + "=" * 70)
    print("‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω")
    print("\nüí° –î–ª—è –±–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:")
    print("   1. –°–æ–∑–¥–∞–π—Ç–µ —Ç–∞–±–ª–∏—Ü—ã user_login_history –∏ user_activity")
    print("   2. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ Telegram –±–æ—Ç–µ")
    print("   3. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –∫ –ë–î")

if __name__ == "__main__":
    main()
